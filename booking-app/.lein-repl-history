(def)
(dev)
(run)
(dev)
(run)
(dev)
(run)
(watch :development)
(dev)
(run)
(dev)
(run)
(dev)
(run)
(stop)
(run)
(use 'dev)
(run)
(stop)
(watch :development)
(run)
(dev)
(watch :development)
(run)
(stop)
(run)
(stop)
(run)
(dev)
(run)
(dev)
(run)
(watch :development)
(run)
c
(stop)
(dev)
(run)
(dev)
(start)
(dev)
(start)
(watch :development)
(start)
(dev)
(start)
(run)
(stop)
(run)
(dev)
(run)
(dev)
app-development-server
server/app-development-server
config/configs
(pr-str config/configs)
(run)
(dev)
(run)
(dev)
(run)
(stop)
[io.pedestal.app.util.log :as log]
(require 'io.pedestal.app.util.log :as log)
(require 'io.pedestal.app.util.log :as z)
(require '[io.pedestal.app.util.log :as log])
(pr-str log)
log
[io.pedestal.app.util.log :as log]
io.pedestal.app.util.console-log
(dev)
(run)
c
(dev)
(run)
(dev)
(tools-help)
(pr-str (keys config/configs))
(dev)
(init 3000)
(init 3000 :booking-app)
(start)
(io.pedestal.app-tools.service/dev-routes :booking-app)
(pr-str (io.pedestal.app-tools.service/dev-routes :booking-app))
(clojure.pprint/pprint (io.pedestal.app-tools.service/dev-routes :booking-app))
::jetty-options
:aaa
::
a
(println ::jetty-options)
(clojure.pprint/pprint (io.pedestal.service.http/default-interceptors))
(clojure.pprint/pprint io.pedestal.service.http/server)

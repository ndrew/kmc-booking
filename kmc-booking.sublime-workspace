{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ren",
				"render-cfg"
			],
			[
				"ma",
				"margin-right"
			],
			[
				"des",
				"destroy-booking-page"
			],
			[
				"bo",
				"booking-app-page"
			],
			[
				"book",
				"booking-app"
			],
			[
				"tra",
				"transform-state"
			],
			[
				"sea",
				"seats-edn"
			],
			[
				"in",
				"include-meta"
			],
			[
				"e",
				"edn-storage-jsvar"
			],
			[
				"def",
				"def-init-data"
			],
			[
				"init",
				"init-cfg"
			],
			[
				"v",
				"vname"
			],
			[
				"lay",
				"layout"
			],
			[
				"pro",
				"props"
			],
			[
				"cal",
				"call-recursive"
			],
			[
				"call",
				"call-func"
			],
			[
				"bind",
				"binding-map"
			],
			[
				"com",
				"composite"
			],
			[
				"d",
				"db"
			],
			[
				"pr",
				"project"
			],
			[
				"vi",
				"vis-data"
			],
			[
				"vis",
				"vis-data"
			],
			[
				"miner",
				"miners"
			],
			[
				"render",
				"render-dummy"
			],
			[
				"mon",
				"monte-proj"
			],
			[
				"re",
				"redraw"
			],
			[
				"dr",
				"draw"
			],
			[
				"get",
				"get-graph"
			],
			[
				"m",
				"miners"
			],
			[
				"r",
				"runtime"
			],
			[
				"p",
				"proj"
			],
			[
				"run",
				"run-miners"
			],
			[
				"va",
				"vars-for-project"
			],
			[
				"ene",
				"entities"
			],
			[
				"mi",
				"miner-type"
			],
			[
				"min",
				"miners"
			],
			[
				"can",
				"canvas-top"
			],
			[
				"leg",
				"legend-width"
			],
			[
				"projec",
				"project-hash"
			],
			[
				"le",
				"legend-width"
			],
			[
				"pad",
				"padding-top"
			],
			[
				"rgb",
				"rgba()"
			],
			[
				"pa",
				"padding-bottom"
			],
			[
				"mar",
				"margin"
			],
			[
				"red",
				"redraw-vis"
			],
			[
				"wn",
				"wnd-width"
			],
			[
				"wnd-",
				"wnd-height"
			],
			[
				"add",
				"add-miners-to-graph"
			],
			[
				"padd",
				"padding"
			],
			[
				"fon",
				"font-family"
			],
			[
				"fo",
				"font-size"
			],
			[
				"width",
				"width:   (property)"
			],
			[
				"text",
				"text-align"
			],
			[
				"te",
				"text-align"
			],
			[
				"rg",
				"rgba()"
			],
			[
				"list",
				"list-types-implementing"
			],
			[
				"la",
				"layouter"
			],
			[
				"data",
				"data-cfg"
			],
			[
				"_",
				"_miner-key"
			],
			[
				"loc",
				"locking"
			],
			[
				"proces",
				"process-entity"
			],
			[
				"ke",
				"keyword"
			],
			[
				"lo",
				"locking"
			],
			[
				"en",
				"entities"
			],
			[
				"set",
				"settings"
			],
			[
				"mo",
				"monte-routes"
			],
			[
				"c",
				"core"
			],
			[
				"n",
				"nmsps"
			],
			[
				"test",
				"test-from-miner-ns"
			],
			[
				"new",
				"new-instance"
			],
			[
				"mine",
				"miner"
			],
			[
				"Tes",
				"TestForMinerCreation"
			],
			[
				"when",
				"when-not"
			],
			[
				"D",
				"DummyMiner"
			],
			[
				"list-",
				"list-miners"
			],
			[
				"dumm",
				"dummy-miner"
			],
			[
				"be",
				"before"
			],
			[
				"las",
				"latest-update"
			],
			[
				"wo",
				"workspace-diff"
			],
			[
				"me",
				"merge-data"
			],
			[
				"li",
				"list-projects"
			],
			[
				"works",
				"workspace"
			],
			[
				"cu",
				"current"
			],
			[
				"workspace",
				"workspace-diff"
			],
			[
				"view",
				"view-id"
			],
			[
				"f",
				"full-refresh"
			],
			[
				"ui",
				"ui-init"
			],
			[
				"worksp",
				"workspace-updated"
			],
			[
				"backgroun",
				"background-color:   (property)"
			],
			[
				"dis",
				"display:   (property)"
			],
			[
				"ta",
				"table-column  (value)"
			],
			[
				"i",
				"inline-block"
			],
			[
				"di",
				"display"
			],
			[
				"handl",
				"handle-default"
			],
			[
				"j",
				"javascript-tag"
			],
			[
				"ol",
				"old-val"
			],
			[
				"sup",
				"super_repo"
			],
			[
				"con",
				"contrib"
			],
			[
				"back",
				"background-color"
			],
			[
				"class_",
				"class_icon"
			],
			[
				"dep",
				"dependency_filter"
			],
			[
				"sho",
				"show_authors"
			],
			[
				"auth",
				"author_filter"
			],
			[
				"autho",
				"author_filter"
			],
			[
				"filter",
				"filter_data"
			],
			[
				"class",
				"class_name"
			],
			[
				"all",
				"all_dependencies"
			],
			[
				"de",
				"dependencies"
			],
			[
				"sixt",
				"sixt_dependencies"
			],
			[
				"to",
				"toString"
			],
			[
				"sh",
				"shiftKey"
			],
			[
				"pre",
				"previous"
			],
			[
				"tim",
				"time_between"
			],
			[
				"char",
				"charCode"
			],
			[
				"cha",
				"charCode"
			],
			[
				"sto",
				"stored"
			],
			[
				"time",
				"timeStamp"
			],
			[
				"key",
				"keymap"
			],
			[
				"t",
				"title"
			],
			[
				"pos",
				"postTemplate"
			],
			[
				"Conte",
				"Content"
			],
			[
				"tem",
				"templates"
			],
			[
				"str",
				"string"
			],
			[
				"al",
				"all_posts"
			],
			[
				"po",
				"posts_path"
			],
			[
				"fil",
				"file_written"
			],
			[
				"file",
				"file_ext"
			],
			[
				"io",
				"ioutil"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "(.log js/console \"FFFFFUUUUU!\")\n  \n  #_(let [app (app/build behavior/booking-app)\n        uri (goog.Uri. (.toString (.-location js/document)))\n        renderer (.getParameterValue uri \"renderer\")\n        render-config (if (= renderer \"auto\")\n                        auto/data-renderer-config\n                        (rendering/render-config))\n        render-fn (push-render/renderer \"content\" render-config render/log-fn)\n        services (services/->MockServices app)\n        app-model (render/consume-app-model app render-fn)]\n    (p/start services)\n    (render/consume-app-model app render-fn)\n    (app/consume-effects app services/services-fn)\n    (app/begin app)\n    {:app app :app-model app-model})",
			"settings":
			{
				"buffer_size": 704,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "(comment \n  \n  \n(ns chat-client.web.simulated.services\n  (:require [cljs.reader :as r]\n            [io.pedestal.app.net.xhr :as xhr]\n            [io.pedestal.app.protocols :as p]\n            [io.pedestal.app.messages :as msg]\n            [chat-client.util :as util]))\n\n;; Notes: The MockServices can be used for testing without a server-side\n;; component; it simulates the server by sending new messages to the\n;; application every 10 seconds.\n\n(defn receive-messages [app]\n  (p/put-message (:input app)\n                 {msg/topic :inbound\n                  msg/type :received\n                  :text (str \"incoming message \" (gensym))\n                  :nickname (str (gensym))\n                  :id (util/random-id)})\n  (.setTimeout js/window (fn [] (receive-messages app)) 10000))\n\n(defrecord MockServices [app]\n  p/Activity\n  (start [this]\n    (receive-messages app))\n  (stop [this]))\n\n(defn services-fn [message input-queue]\n  (when-let [msg (:out-message message)]\n    (.setTimeout js/window #(p/put-message input-queue\n                                           {msg/topic :inbound\n                                            msg/type :received\n                                            :text (:text msg)\n                                            :nickname (:nickname msg)\n                                            :id (:id msg)}) 500)\n    (.log js/console (str \"Send to Server: \" (pr-str message)))))\n  \n  )",
			"settings":
			{
				"buffer_size": 1422,
				"line_ending": "Unix"
			}
		},
		{
			"file": "booking-app/app/src/booking_app/behavior.clj",
			"settings":
			{
				"buffer_size": 3121,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/behavior.clj",
			"settings":
			{
				"buffer_size": 6223,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 209 files for \"chat-client.behavior\" (case sensitive)\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/behavior.clj:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns ^:shared chat-client.behavior\n   13    (:require [clojure.set :as set]\n   14              [io.pedestal.app :as app]\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/app.cljs:\n   18              ;; fresh view to work.\n   19              [io.pedestal.app.net.repl-client :as repl-client]\n   20:             [chat-client.behavior :as behavior]\n   21              [chat-client.web.rendering :as rendering]\n   22              [chat-client.web.services :as services]))\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/simulated/start.cljs:\n   20              ;; fresh view to work.\n   21              [io.pedestal.app-tools.tooling :as tooling]\n   22:             [chat-client.behavior :as behavior]\n   23              [chat-client.web.rendering :as rendering]\n   24              [chat-client.web.simulated.services :as services]))\n\n3 matches across 3 files\n\n\nSearching 209 files for \"build\" (case sensitive)\n\n/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/behavior.clj:\n   54    \n   55    ;; The examples below show the signature of each type of function\n   56:   ;; that is used to build a behavior dataflow.\n   57    \n   58    ;; transform\n\n/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/start.cljs:\n    9  \n   10  (defn create-app [render-config]\n   11:   (let [app (app/build behavior/booking-app)\n   12          render-fn (push-render/renderer \"content\" render-config)\n   13          app-model (render/consume-app-model app render-fn)\n\n/Users/ndrw/kmc-booking/booking-app/config/config.clj:\n   11    ;; config map contains one entry for each appliction.\n   12    {:booking-app\n   13:    {;; :build contains parameters which are passed to the build\n   14:     :build {;; :watch-files contains a list of files to watch for\n   15              ;; changes. Each file had a tag associated with it, in\n   16              ;; this case :html.\n   ..\n   29                    ;; aspect by adding a :template key.\n   30                    :default-template \"application.html\"\n   31:                   ;; The root directory in which to put build\n   32                    ;; output. Possible values are :public and\n   33                    ;; :tools-public. Override this value in an aspect\n   ..\n   76                          ;; Turn on logging\n   77                          :logging? true\n   78:                         ;; build output goes to tools/out/public\n   79                          :output-root :tools-public}\n   80                :development {:uri \"/booking-app-dev.html\"\n\n/Users/ndrw/kmc-booking/booking-app/dev/dev.clj:\n   14          [cljs.repl.browser :only [repl-env]])\n   15    (:require [io.pedestal.app-tools.server :as server]\n   16:             [io.pedestal.app-tools.build :as build]\n   17              [io.pedestal.app-tools.compile.repl :as repl]\n   18              [config :as config]\n   ..\n   53    directories exist.\"\n   54    [port config-name]\n   55:   (.mkdirs (io/file build/*tools-public*))\n   56:   (.mkdirs (io/file build/*public*))\n   57    (assert (contains? config/configs config-name)\n   58            (str \"Valid config names are \" (pr-str (keys config/configs)) \".\"))\n   ..\n   78    specific application. Application names must be keywrods.\"}\n   79    clean-cljs\n   80:   (build/cleaner build/*public* config/configs))\n   81  \n   82  (defn watch\n   83:   \"Incrementally build this project when files change. This will only\n   84:   build a single aspect at a time, where an aspect is something\n   85    like :development or :production. Aspect names are configured in\n   86    config/config.clj.\n   87  \n   88    If this project contains more than one application, the default is\n   89:   to build all of them. Pass a vector of config names as the first\n   90    argument to watch a specific group of applications.\n   91  \n   92:   Output of the build goes to out/public. This function is useful when\n   93    serving out/public from another server (for example the service\n   94:   server) where on-demand build is not available.\"\n   95    ([aspect]\n   96       (watch (vec (keys config/configs)) aspect))\n   ..\n   98       (assert (vector? config-names) \"config-names must be a vector\")\n   99       (println \"watching\" config-names \"/\" aspect)\n  100:      (let [w (build/watcher (vals (select-keys config/configs config-names)) aspect)]\n  101         ((:start-fn w))\n  102         (alter-var-root #'watcher (constantly w))\n  ...\n  123    (println \"Type (stop) to stop the current server\")\n  124    (println \"----\")\n  125:   (println \"Type (watch aspect) to build a specific aspect when it changes\")\n  126    (println \"Type (unwatch) to stop the current watcher\")\n  127    (println))\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/cljs/core.cljs:\n  262  \n  263  (defprotocol IPrintWithWriter\n  264:   \"The old IPrintable protocol's implementation consisted of building a giant\n  265     list of strings to concatenate.  This involved lots of concat calls,\n  266     intermediate vectors, and lazy-seqs, and was very slow in some older JS\n  ...\n 3181       (ChunkedSeq. vec node i off meta nil)))\n 3182  \n 3183: (declare build-subvec)\n 3184  \n 3185  (deftype Subvec [meta v start end ^:mutable __hash]\n ....\n 3189  \n 3190    IWithMeta\n 3191:   (-with-meta [coll meta] (build-subvec meta v start end __hash))\n 3192  \n 3193    IMeta\n ....\n 3200      (if (== start end)\n 3201        (throw (js/Error. \"Can't pop empty vector\"))\n 3202:       (build-subvec meta v start (dec end) nil)))\n 3203  \n 3204    ICollection\n 3205    (-conj [coll o]\n 3206:     (build-subvec meta (-assoc-n v end o) start (inc end) nil))\n 3207  \n 3208    IEmptyableCollection\n ....\n 3241    (-assoc [coll key val]\n 3242      (let [v-pos (+ start key)]\n 3243:       (build-subvec meta (-assoc v v-pos val)\n 3244                 start (max end (inc v-pos))\n 3245                 nil)))\n ....\n 3260      (-lookup coll k not-found)))\n 3261  \n 3262: (defn- build-subvec [meta v start end __hash]\n 3263    (let [c (count v)]\n 3264         (when (or (neg? start)\n ....\n 3278       (subvec v start (count v)))\n 3279    ([v start end]\n 3280:      (build-subvec nil v start end nil)))\n 3281  \n 3282  (defn- tv-ensure-editable [edit node]\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app.clj:\n   17  \n   18      There is one function for handling input (model), three for\n   19:     handling output (output, feedback, and emitter) and one for building\n   20      up dataflows which transform data from the data model to something\n   21      that is easy to consume by one of the output functions.\n   ..\n  410                                     (some #{k} key-values)) v]) description))))\n  411  \n  412: (defn build\n  413    \"Given a map which describes the application and a renderer, return\n  414    a new application. The returned application map contains input and\n\n/Users/ndrw/kmc-booking/booking-app/test/booking_app/test/behavior.clj:\n   20  \n   21  (deftest test-app-state\n   22:   (let [app (app/build example-app)]\n   23      (app/begin app)\n   24      (is (true? (test/run-sync! app [{msg/topic :example-transform, msg/type msg/init, :value \"x\"}])))\n   ..\n   28  \n   29  (deftest test-query-ui\n   30:   (let [app (app/build example-app)\n   31          app-model (render/consume-app-model app (constantly nil))]\n   32      (app/begin app)\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/app.cljs:\n   26    (.log js/console \"app::start\")\n   27    \n   28:   (let [app (app/build behavior/chat-client)\n   29          render-fn (push-render/renderer \"content\" (rendering/render-config) render/log-fn)\n   30          services (services/->Services app)]\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/simulated/start.cljs:\n   26  (defn ^:export main []\n   27    (.log js/console \"app.simulated::start\")\n   28:   (let [app (app/build behavior/chat-client)\n   29          uri (goog.Uri. (.toString (.-location js/document)))\n   30          renderer (.getParameterValue uri \"renderer\")\n\n/Users/ndrw/pedestal-samples/chat/chat-client/config/config.clj:\n   16  (def configs\n   17    {:chat-client\n   18:    {:build {:watch-files (compile/html-files-in \"app/templates\")\n   19              ;; When an HTML file changes, trigger the compilation of\n   20              ;; any files which use macros to read in templates. \n\n/Users/ndrw/pedestal-samples/chat/chat-client/dev/dev.clj:\n   14          [cljs.repl.browser :only [repl-env]])\n   15    (:require [io.pedestal.app-tools.server :as server]\n   16:             [io.pedestal.app-tools.build :as build]\n   17              [io.pedestal.app-tools.compile.repl :as repl]\n   18              [config :as config]\n   ..\n   53    directories exist.\"\n   54    [port config-name]\n   55:   (.mkdirs (io/file build/*tools-public*))\n   56:   (.mkdirs (io/file build/*public*))\n   57    (assert (contains? config/configs config-name)\n   58            (str \"Valid config names are \" (pr-str (keys config/configs)) \".\"))\n   ..\n   78    specific application. Application names must be keywrods.\"}\n   79    clean-cljs\n   80:   (build/cleaner build/*public* config/configs))\n   81  \n   82  (defn watch\n   83:   \"Incrementally build this project when files change. This will only\n   84:   build a single aspect at a time, where an aspect is something\n   85    like :development or :production. Aspect names are configured in\n   86    config/config.clj.\n   87  \n   88    If this project contains more than one application, the default is\n   89:   to build all of them. Pass a vector of config names as the first\n   90    argument to watch a specific group of applications.\n   91  \n   92:   Output of the build goes to out/public. This function is useful when\n   93    serving out/public from another server (for example the service\n   94:   server) where on-demand build is not available.\"\n   95    ([aspect]\n   96       (watch (vec (keys config/configs)) aspect))\n   ..\n   98       (assert (vector? config-names) \"config-names must be a vector\")\n   99       (println \"watching\" config-names \"/\" aspect)\n  100:      (let [w (build/watcher (vals (select-keys config/configs config-names)) aspect)]\n  101         ((:start-fn w))\n  102         (alter-var-root #'watcher (constantly w))\n  ...\n  123    (println \"Type (stop) to stop the current server\")\n  124    (println \"----\")\n  125:   (println \"Type (watch aspect) to build a specific aspect when it changes\")\n  126    (println \"Type (unwatch) to stop the current watcher\")\n  127    (println))\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app.clj:\n   17  \n   18      There is one function for handling input (model), three for\n   19:     handling output (output, feedback, and emitter) and one for building\n   20      up dataflows which transform data from the data model to something\n   21      that is easy to consume by one of the output functions.\n   ..\n  410                                     (some #{k} key-values)) v]) description))))\n  411  \n  412: (defn build\n  413    \"Given a map which describes the application and a renderer, return\n  414    a new application. The returned application map contains input and\n\n/Users/ndrw/pedestal/app/src/io/pedestal/app.clj:\n   17  \n   18      There is one function for handling input (model), three for\n   19:     handling output (output, feedback, and emitter) and one for building\n   20      up dataflows which transform data from the data model to something\n   21      that is easy to consume by one of the output functions.\n   ..\n  430                                     (some #{k} key-values)) v]) description))))\n  431  \n  432: (defn build\n  433    \"Given a map which describes the application and a renderer, return\n  434    a new application. The returned application map contains input and\n\n/Users/ndrw/pedestal/app/test/io/pedestal/app/render/test/push.clj:\n  128          (is (nil? (get-id r [:b :c])))))))\n  129  \n  130: (deftest test-render-build-up-tear-down\n  131  \n  132    (binding [d/*dom* (d/test-dom)]\n\n/Users/ndrw/pedestal/app/test/io/pedestal/app/test/tree.clj:\n   50                :seq 1\n   51                :t 1}))))\n   52:   (testing \"build a tree\"\n   53      (let [expected-tree {:deltas {0 [{:delta [:node-create [] :map] :seq 0 :t 0}\n   54                                       {:delta [:node-create [:a] :map] :seq 1 :t 0}\n   ..\n  628                                              {:delta [:node-destroy [:a :c] :map] :t 1}]))))))))))\n  629  \n  630: (deftest test-build-by-example\n  631:   (testing \"build a tree by example\"\n  632      (let [ui new-app-model\n  633            deltas [{:a {}}]]\n\n/Users/ndrw/pedestal/app/test/io/pedestal/test/app.clj:\n  303              :emitters {:emitter-answer {:fn :emitter-answer-fn :input #{:model-x :view-sum}}}}))))\n  304  \n  305: (deftest build-system\n  306    (let [desc {:models {:model-a {:init \"\" :fn (fn [old message] (:value message))}}}\n  307:         app (build desc)]\n  308      (is (= (dissoc @(:state app) :ui)\n  309             {:feedback [] :output []}))))\n  ...\n  360  \n  361  (deftest test-simplest-possible-app\n  362:   (let [app (build simplest-possible-app)\n  363          _ (begin app)\n  364          results (run-sync! app [{msg/topic :model-a :n 42}])\n  ...\n  404  \n  405  (deftest test-two-models-app\n  406:   (let [app (build two-models-app)\n  407          _ (begin app)\n  408          results (run-sync! app [{msg/topic :model-a :n 42}\n  ...\n  460  \n  461  (deftest test-two-views-app\n  462:   (let [app (build two-views-app)\n  463          _ (begin app)\n  464          results (run-sync! app [{msg/topic :model-a :n 42}\n  ...\n  528  \n  529  (deftest test-square-root\n  530:   (let [app (build square-root-app)\n  531          _ (begin app)\n  532          results (run-sync! app [{msg/topic :accuracy :n 0.000001}\n  ...\n  552  \n  553  (deftest test-square-root-modify-inputs\n  554:   (let [app (build square-root-app)\n  555          _ (begin app)\n  556          results (run-sync! app [{msg/topic :accuracy :n 0.000001}\n  ...\n  599  \n  600  (deftest test-dependent-views-which-depend-on-one-model\n  601:   (let [app (build dependent-views-app)\n  602          _ (begin app)\n  603          results (run-sync! app [{msg/topic :x :n 42}\n  ...\n  627  \n  628  (deftest test-two-views-with-same-input-old-values\n  629:   (let [app (build two-views-with-same-input-old-values)\n  630          _ (begin app)\n  631          results (run-sync! app [{msg/topic :x :n 1}\n  ...\n  653  \n  654  (deftest test-two-views-with-same-input-new-values\n  655:   (let [app (build two-views-with-same-input-new-values)\n  656          _ (begin app)\n  657          results (run-sync! app [{msg/topic :x :n 1}\n  ...\n  711      (testing \"with input from model\"\n  712        (let [services-state (atom [])\n  713:             app (build output-app)\n  714              _ (capture-queue 3 :output app services-state)\n  715              _ (begin app)\n  ...\n  724      (testing \"with input from view\"\n  725        (let [services-state (atom [])\n  726:             app (build (assoc output-app :output {:half (echo-output :s)}))\n  727              _ (capture-queue 3 :output app services-state)\n  728              _ (begin app)\n  ...\n  741  \n  742  (deftest test-with-renderer\n  743:   (let [app (build dependent-views-app)\n  744          _ (begin app)\n  745          renderer-state (atom [])]\n  ...\n  796  \n  797  (deftest test-dataflow-one\n  798:   (let [app (build dataflow-test-one)\n  799          _ (begin app)\n  800          results (run-sync! app [{msg/topic :x :n 1}\n  ...\n  830  \n  831  (deftest test-dataflow-two\n  832:   (let [app (build dataflow-test-two)\n  833          _ (begin app)\n  834          results (run-sync! app [{msg/topic :x :n 1}\n  ...\n  879  (deftest test-navigation-app\n  880    (testing \"only view the default paths\"\n  881:     (let [app (build navigation-app)\n  882            _ (begin app)\n  883            results (run-sync! app [{msg/topic :a :n 10}\n  ...\n  899                 :emitter #{}}]))))\n  900    (testing \"navigate between paths\"\n  901:     (let [app (build navigation-app)\n  902            _ (begin app)\n  903            results (run-sync! app [{msg/topic :a :n 10}\n  ...\n  950  \n  951  (deftest test-subscribe-and-unsubscribe-app\n  952:   (let [app (build subscribe-and-unsubscribe-app)\n  953          _ (begin app [{msg/topic msg/app-model msg/type :noop}])\n  954          results (run-sync! app [{msg/topic :a :n 10}\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/app/src/behavior.clj:\n   38    \n   39    ;; The examples below show the signature of each type of function\n   40:   ;; that is used to build a behavior dataflow.\n   41    \n   42    ;; transform\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/app/src/start.cljs:\n   13          ;; 'behavior/example-app'. The application is a record which\n   14          ;; implements the Receiver protocol.\n   15:         app (app/build behavior/example-app)\n   16          ;; Create the render function that will be used by this\n   17          ;; application. A renderer function takes two arguments: the\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/config/config.clj:\n   11    ;; config map contains one entry for each appliction.\n   12    {:{{name}}\n   13:    {;; :build contains parameters which are passed to the build\n   14:     :build {;; :watch-files contains a list of files to watch for\n   15              ;; changes. Each file had a tag associated with it, in\n   16              ;; this case :html.\n   ..\n   29                    ;; aspect by adding a :template key.\n   30                    :default-template \"application.html\"\n   31:                   ;; The root directory in which to put build\n   32                    ;; output. Possible values are :public and\n   33                    ;; :tools-public. Override this value in an aspect\n   ..\n   76                          ;; Turn on logging\n   77                          :logging? true\n   78:                         ;; build output goes to tools/out/public\n   79                          :output-root :tools-public}\n   80                :development {:uri \"/{{name}}-dev.html\"\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/dev/dev.clj:\n    3          [cljs.repl.browser :only [repl-env]])\n    4    (:require [io.pedestal.app-tools.server :as server]\n    5:             [io.pedestal.app-tools.build :as build]\n    6              [io.pedestal.app-tools.compile.repl :as repl]\n    7              [config :as config]\n    .\n   42    directories exist.\"\n   43    [port config-name]\n   44:   (.mkdirs (io/file build/*tools-public*))\n   45:   (.mkdirs (io/file build/*public*))\n   46    (assert (contains? config/configs config-name)\n   47            (str \"Valid config names are \" (pr-str (keys config/configs)) \".\"))\n   ..\n   67    specific application. Application names must be keywrods.\"}\n   68    clean-cljs\n   69:   (build/cleaner build/*public* config/configs))\n   70  \n   71  (defn watch\n   72:   \"Incrementally build this project when files change. This will only\n   73:   build a single aspect at a time, where an aspect is something\n   74    like :development or :production. Aspect names are configured in\n   75    config/config.clj.\n   76  \n   77    If this project contains more than one application, the default is\n   78:   to build all of them. Pass a vector of config names as the first\n   79    argument to watch a specific group of applications.\n   80  \n   81:   Output of the build goes to out/public. This function is useful when\n   82    serving out/public from another server (for example the service\n   83:   server) where on-demand build is not available.\"\n   84    ([aspect]\n   85       (watch (vec (keys config/configs)) aspect))\n   ..\n   87       (assert (vector? config-names) \"config-names must be a vector\")\n   88       (println \"watching\" config-names \"/\" aspect)\n   89:      (let [w (build/watcher (vals (select-keys config/configs config-names)) aspect)]\n   90         ((:start-fn w))\n   91         (alter-var-root #'watcher (constantly w))\n   ..\n  112    (println \"Type (stop) to stop the current server\")\n  113    (println \"----\")\n  114:   (println \"Type (watch aspect) to build a specific aspect when it changes\")\n  115    (println \"Type (unwatch) to stop the current watcher\")\n  116    (println))\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/test/behavior.clj:\n   20  \n   21  (deftest test-app-state\n   22:   (let [app (app/build example-app)]\n   23      (app/begin app)\n   24      (is (vector?\n   ..\n   29  \n   30  (deftest test-query-ui\n   31:   (let [app (app/build example-app)\n   32          app-model (render/consume-app-model app (constantly nil))]\n   33      (app/begin app)\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/plain/app/src/start.cljs:\n    8  \n    9  (defn create-app [render-config]\n   10:   (let [app (app/build behavior/example-app)\n   11          render-fn (push-render/renderer \"content\" render-config)\n   12          app-model (render/consume-app-model app render-fn)]\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/plain/config/config.clj:\n    5  (def configs\n    6    {:{{name}}\n    7:    {:build {:watch-files (compile/html-files-in \"app/templates\")\n    8              :triggers {:html [#\"{{sanitized}}/rendering.js\"]}}\n    9      :application {:generated-javascript \"generated-js\"\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/plain/dev/dev.clj:\n    3          [cljs.repl.browser :only [repl-env]])\n    4    (:require [io.pedestal.app-tools.server :as server]\n    5:             [io.pedestal.app-tools.build :as build]\n    6              [io.pedestal.app-tools.compile.repl :as repl]\n    7              [config :as config]\n    .\n   42    directories exist.\"\n   43    [port config-name]\n   44:   (.mkdirs (io/file build/*tools-public*))\n   45:   (.mkdirs (io/file build/*public*))\n   46    (assert (contains? config/configs config-name)\n   47            (str \"Valid config names are \" (pr-str (keys config/configs)) \".\"))\n   ..\n   67    specific application. Application names must be keywrods.\"}\n   68    clean-cljs\n   69:   (build/cleaner build/*public* config/configs))\n   70  \n   71  (defn watch\n   72:   \"Incrementally build this project when files change. This will only\n   73:   build a single aspect at a time, where an aspect is something\n   74    like :development or :production. Aspect names are configured in\n   75    config/config.clj.\n   76  \n   77    If this project contains more than one application, the default is\n   78:   to build all of them. Pass a vector of config names as the first\n   79    argument to watch a specific group of applications.\n   80  \n   81:   Output of the build goes to out/public. This function is useful when\n   82    serving out/public from another server (for example the service\n   83:   server) where on-demand build is not available.\"\n   84    ([aspect]\n   85       (watch (vec (keys config/configs)) aspect))\n   ..\n   87       (assert (vector? config-names) \"config-names must be a vector\")\n   88       (println \"watching\" config-names \"/\" aspect)\n   89:      (let [w (build/watcher (vals (select-keys config/configs config-names)) aspect)]\n   90         ((:start-fn w))\n   91         (alter-var-root #'watcher (constantly w))\n   ..\n  112    (println \"Type (stop) to stop the current server\")\n  113    (println \"----\")\n  114:   (println \"Type (watch aspect) to build a specific aspect when it changes\")\n  115    (println \"Type (unwatch) to stop the current watcher\")\n  116    (println))\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/plain/test/behavior.clj:\n   15  \n   16  (deftest test-app-state\n   17:   (let [app (app/build example-app)]\n   18      (app/begin app)\n   19      (is (vector?\n   ..\n   22  \n   23  (deftest test-query-ui\n   24:   (let [app (app/build example-app)\n   25          app-model (render/consume-app-model app (constantly nil))]\n   26      (app/begin app)\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/build.clj:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app-tools.build\n   13    (:use [io.pedestal.app-tools.compile.config :only [cljs-compilation-options]]\n   14          [io.pedestal.app-tools.host-page :only [application-host]]\n   ..\n  185            (application-host config aspect))))\n  186  \n  187: (defn build!\n  188    \"Builds the current project into the out directory.\"\n  189    [config aspect]\n  ...\n  195      (process-files \"tools\" \"app\")))\n  196  \n  197: (def build-agent (agent nil))\n  198  \n  199: (defn thread-safe-build! [config aspect]\n  200    (let [p (promise)]\n  201:     (send build-agent (fn [_] (deliver p (try (build! config aspect)\n  202                                               (catch Throwable e\n  203                                                 (do (log/error :exception e)\n  ...\n  211      :task\n  212      (scheduler/periodic scheduler 500\n  213:                         (fn [] (doseq [b (map #(thread-safe-build! % aspect) configs)]\n  214                                  (deref b))))))\n  215  \n  ...\n  227                 (:aspects config))))\n  228  \n  229: (defn- attempt-build? [request]\n  230    (let [uri (:uri request)]\n  231      (or (= uri \"/\")\n  ...\n  234          (.endsWith (:uri request) \".html\"))))\n  235  \n  236: (defn- build-aspects [config request]\n  237    (if (= (:uri request) \"/_tools/render/recording\")\n  238      (keep (fn [[k v]] (when (not= (:optimizations v) :advanced) k)) (:aspects config))\n  239      [(aspect-from-request config request)]))\n  240  \n  241: (definterceptorfn builder\n  242:   \"Interceptor that blocks further processing until all required build\n  243    steps have been completed.\"\n  244    [config]\n  245    (interceptor/on-request\n  246     (fn [request]\n  247:      (when (attempt-build? request)\n  248         (let [t (System/currentTimeMillis)]\n  249:          (doseq [aspect (build-aspects config request)]\n  250             (log/info :msg (str \"LOGGING \" aspect))\n  251:            @(thread-safe-build! config aspect))\n  252           (log/info :msg \"Build finished\" t (- (System/currentTimeMillis) t) :units :ms)))\n  253       request)))\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/compile.clj:\n   11  \n   12  (ns io.pedestal.app-tools.compile\n   13:   (:use [cljs.closure :only [build -compile dependency-order Compilable]])\n   14    (:require [clojure.java.io :as io]\n   15              [clojure.java.classpath :as classpath]\n   ..\n  114            (delete-js-file options (:js-file-name f)))))))\n  115  \n  116: (defn build-sources!\n  117    \"Given a sequence of sources and compiler options, compile the\n  118    sources to JavaScript. Each source is a map which contains the keys\n  ...\n  122    Compilable.\"\n  123    [sources options]\n  124:   (build (reify Compilable\n  125             (-compile [_ options]\n  126               (force-compilation options sources)\n  ...\n  185  \n  186  (defn compile!\n  187:   \"Build all cljs in a project only when a build is necessary. Include a :watch-files\n  188    key in options to add additional sources to watch.\n  189  \n  ...\n  197      (let [sources (watched-sources options sources)]\n  198        (when-let [tags (compilation-required? sources (:output-to options))]\n  199:         (do (build-sources! (filter :compile? sources) (assoc options :tags tags))\n  200              true)))))\n  201  \n  202: (def ^:private build-agent (agent nil))\n  203  \n  204  (defn thread-safe-compile!\n  205:   \"Build all cljs in a project using an agent to serialize builds.\n  206  \n  207    Returns a promise which can be blocked on to wait for compilation to\n  ...\n  209    [options]\n  210    (let [p (promise)]\n  211:     (send build-agent (fn [_] (deliver p (try (compile! options)\n  212                                               (catch Throwable e {:error (.getMessage e)})))))\n  213      p))\n  ...\n  215  (comment\n  216  \n  217:   ;; Example build options\n  218    \n  219    {;; Standard cljs compiler options\n  220:    :output-dir \"example-build/out\"\n  221:    :output-to \"example-build/application.js\"\n  222     :optimizations :advanced\n  223     ;; Add files to watch which are not ClojureScript files. Use this\n  ...\n  228     :watch-files (concat (html-files-in \"templates\")\n  229                          (clj-files-in \"src/cljs-macros\" :macros))\n  230:    ;; JavaScript file prefixes to ignore during this build. Use this\n  231     ;; to limit what is included in an application.\n  232     :ignore [#\"com/company/orders.*\"]\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/host_page.clj:\n  140       HTML.\n  141  \n  142:   2. From the build script to create static deployment artifacts.\"\n  143    [config environment]\n  144    (let [aspect (get-in config [:aspects environment])\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/routes.clj:\n   19          [io.pedestal.app-tools.host-page :only [add-control-panel]]\n   20          [io.pedestal.app-tools.rendering-view.routes :only [rendering-view-routes]])\n   21:   (:require [io.pedestal.app-tools.build :as build]\n   22              [io.pedestal.app-tools.middleware :as middleware]\n   23              io.pedestal.app-tools.compile))\n   ..\n   37         application-routes\n   38         (rendering-view-routes config)\n   39:        (ANY \"*\" request (-> (file-response \"404.html\" {:root build/*tools-public*})\n   40                              (status 404))))\n   41:       (wrap-file build/*tools-public*)\n   42:       (wrap-file build/*public*)\n   43        (maybe-redirect-to-service config)\n   44:       (build/wrap-build config)\n   45        wrap-params\n   46        wrap-file-info\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/service.clj:\n   22              [io.pedestal.service.http.route :as route]\n   23              [io.pedestal.app-tools.rendering-view.routes :as render-routes]\n   24:             [io.pedestal.app-tools.build :as build]\n   25              [io.pedestal.app-tools.middleware :as app-tools-middleware]\n   26              [io.pedestal.app-tools.host-page :as host-page]\n   ..\n   69                               (middlewares/file-info)\n   70                               (middlewares/params)\n   71:                              (build/builder config)\n   72                               (maybe-redirect-to-service config)\n   73:                              (middlewares/file build/*public*)\n   74:                              (middlewares/file build/*tools-public*)\n   75                               (route/router routes)]\n   76     ::bootstrap/routes routes\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/compile/config.clj:\n   22       (cljs-compilation-options public config :development))\n   23    ([public config environment]\n   24:      (let [build-opts (assoc (:build config) :output-dir (jstr public config \"out\"))\n   25             aspect (get-in config [:aspects environment])\n   26:            build-opts (assoc build-opts\n   27                          :output-to (jstr public config (:out-file aspect)))]\n   28         (merge (if-let [optimizations (:optimizations aspect)]\n   29:                 (assoc build-opts :optimizations optimizations)\n   30:                 build-opts)\n   31                (:compiler-options aspect)))))\n   32  \n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/compile/repl.clj:\n   13    (:use [io.pedestal.app-tools.compile :only [thread-safe-compile!]]\n   14          [io.pedestal.app-tools.compile.config :only [cljs-compilation-options]]\n   15:         [io.pedestal.app-tools.build :only [*public*]]))\n   16  \n   17  (defn compile-project\n\n/Users/ndrw/pedestal/app-tools/test/io/pedestal/app_tools/test/build.clj:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app-tools.test.build\n   13    (:require [io.pedestal.app.protocols :as p]\n   14              [io.pedestal.app.messages :as msg]\n   15              [io.pedestal.app.tree :as tree])\n   16:   (:use io.pedestal.app-tools.build\n   17          clojure.test))\n   18  \n   19  (deftest test-split-path\n   20:   (let [split-path #'io.pedestal.app-tools.build/split-path\n   21          path (str (clojure.java.io/file \"some\" \"path\"))]\n   22      (is (= (split-path (str path)) [\"some\" \"path\"]))))\n\n163 matches across 33 files\n\n\nSearching 209 files for \"app/build\" (case sensitive)\n\n/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/start.cljs:\n    9  \n   10  (defn create-app [render-config]\n   11:   (let [app (app/build behavior/booking-app)\n   12          render-fn (push-render/renderer \"content\" render-config)\n   13          app-model (render/consume-app-model app render-fn)\n\n/Users/ndrw/kmc-booking/booking-app/test/booking_app/test/behavior.clj:\n   20  \n   21  (deftest test-app-state\n   22:   (let [app (app/build example-app)]\n   23      (app/begin app)\n   24      (is (true? (test/run-sync! app [{msg/topic :example-transform, msg/type msg/init, :value \"x\"}])))\n   ..\n   28  \n   29  (deftest test-query-ui\n   30:   (let [app (app/build example-app)\n   31          app-model (render/consume-app-model app (constantly nil))]\n   32      (app/begin app)\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/app.cljs:\n   26    (.log js/console \"app::start\")\n   27    \n   28:   (let [app (app/build behavior/chat-client)\n   29          render-fn (push-render/renderer \"content\" (rendering/render-config) render/log-fn)\n   30          services (services/->Services app)]\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/simulated/start.cljs:\n   26  (defn ^:export main []\n   27    (.log js/console \"app.simulated::start\")\n   28:   (let [app (app/build behavior/chat-client)\n   29          uri (goog.Uri. (.toString (.-location js/document)))\n   30          renderer (.getParameterValue uri \"renderer\")\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/app/src/start.cljs:\n   13          ;; 'behavior/example-app'. The application is a record which\n   14          ;; implements the Receiver protocol.\n   15:         app (app/build behavior/example-app)\n   16          ;; Create the render function that will be used by this\n   17          ;; application. A renderer function takes two arguments: the\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/test/behavior.clj:\n   20  \n   21  (deftest test-app-state\n   22:   (let [app (app/build example-app)]\n   23      (app/begin app)\n   24      (is (vector?\n   ..\n   29  \n   30  (deftest test-query-ui\n   31:   (let [app (app/build example-app)\n   32          app-model (render/consume-app-model app (constantly nil))]\n   33      (app/begin app)\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/plain/app/src/start.cljs:\n    8  \n    9  (defn create-app [render-config]\n   10:   (let [app (app/build behavior/example-app)\n   11          render-fn (push-render/renderer \"content\" render-config)\n   12          app-model (render/consume-app-model app render-fn)]\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/plain/test/behavior.clj:\n   15  \n   16  (deftest test-app-state\n   17:   (let [app (app/build example-app)]\n   18      (app/begin app)\n   19      (is (vector?\n   ..\n   22  \n   23  (deftest test-query-ui\n   24:   (let [app (app/build example-app)\n   25          app-model (render/consume-app-model app (constantly nil))]\n   26      (app/begin app)\n\n11 matches across 8 files\n\n\nSearching 209 files for \"log\" (case sensitive)\n\n/Users/ndrw/kmc-booking/booking/project.clj:\n   13  \n   14                   ;; Logging\n   15:                  [ch.qos.logback/logback-classic \"1.0.7\"]\n   16                   [org.slf4j/jul-to-slf4j \"1.7.2\"]\n   17                   [org.slf4j/jcl-over-slf4j \"1.7.2\"]\n   18:                  [org.slf4j/log4j-over-slf4j \"1.7.2\"]]\n   19    :profiles {:dev {:source-paths [\"dev\"]}}\n   20    :resource-paths [\"config\"]\n\n/Users/ndrw/kmc-booking/booking-app/project.clj:\n    4                   [org.clojure/clojurescript \"0.0-1586\"]\n    5                   [domina \"1.0.1\"]\n    6:                  [ch.qos.logback/logback-classic \"1.0.6\"]\n    7                   [io.pedestal/pedestal.app \"0.1.1-SNAPSHOT\"]\n    8                   [io.pedestal/pedestal.app-tools \"0.1.1-SNAPSHOT\"]]\n\n/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/rendering.cljs:\n   65          html (templates/add-template r path (:booking-app-page templates))]\n   66      \n   67:     (.log js/console (str \"appending to \" (dom/by-id parent) ))\n   68      (dom/append! (dom/by-id parent) (html {:title \"BOOOOKING\"}))))\n   69  \n\n/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/start.cljs:\n   17  \n   18      (app/begin app)\n   19:     (.log js/console (pr-str {:app app \n   20                                :app-model app-model}))\n   21      \n   ..\n   25  \n   26  (defn ^:export main []\n   27:   (.log js/console \"booking-app.simulated.start::main\")\n   28  \n   29    ;(create-app (rendering/render-config))\n\n/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/simulated/start.cljs:\n   23    ;;\n   24    \n   25:   (.log js/console \"booking-app.simulated.start::main\")\n   26    (let [render-cfg (rendering/render-config)]    \n   27  \n   28:     (.log js/console (pr-str render-cfg))\n   29  \n   30      \n\n/Users/ndrw/kmc-booking/booking-app/config/config.clj:\n   51                          ;; render configuration.\n   52                          :renderer 'booking_app.rendering\n   53:                         ;; Enable logging of rendering data when in\n   54                          ;; this view.\n   55:                         :logging? true\n   56                          :order 2}}\n   57      ;; Each aspect provides a unique way to view and interact with\n   ..\n   74                          ;; Alt-Shift-R to start and stop recording.\n   75                          :recording? true\n   76:                         ;; Turn on logging\n   77:                         :logging? true\n   78                          ;; build output goes to tools/out/public\n   79                          :output-root :tools-public}\n   ..\n   82                              :out-file \"booking-app-dev.js\"\n   83                              :main 'booking_app.start\n   84:                             :logging? true\n   85                              :order 3}\n   86                :fresh {:uri \"/fresh.html\"\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/domina.cljs:\n  109  \n  110  (def *debug* true)\n  111: (defn log-debug [& mesg]\n  112    (when (and *debug* (not (= (.-console js/window) js/undefined)))\n  113:     (.log js/console (apply str  mesg))))\n  114  \n  115: (defn log [& mesg]\n  116    (when (.-console js/window)\n  117:     (.log js/console (apply str mesg))))\n  118  \n  119  (defn by-id\n  ...\n  470    respond to .length, but are not arrays nor NodeSets. This returns a\n  471    real sequence view of such objects. If passed an object that is not\n  472:   a logical sequence at all, returns a single-item seq containing the\n  473    object.\"\n  474    [list-thing]\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/cljs/core.cljs:\n   52  \n   53  (defn ^boolean not\n   54:   \"Returns true if x is logical false, false otherwise.\"\n   55    [x] (if x false true))\n   56  \n   ..\n 1065    returns false.  Note that for numerically indexed collections like\n 1066    vectors and arrays, this tests if the numeric key is within the\n 1067:   range of indexes. 'contains?' operates constant or logarithmic time;\n 1068    it will not perform a linear search for a value.  See also 'some'.\"\n 1069    [coll v]\n ....\n 1100  (defn compare\n 1101    \"Comparator. Returns a negative number, zero, or a positive number\n 1102:   when x is logically 'less than', 'equal to', or 'greater than'\n 1103    y. Uses IComparable if available and google.array.defaultCompare for objects\n 1104   of the same type and special-cases nil to be less than any other object.\"\n ....\n 2210  \n 2211  (defn ^boolean every?\n 2212:   \"Returns true if (pred x) is logical true for every x in coll, else\n 2213    false.\"\n 2214    [pred coll]\n ....\n 2219  \n 2220  (defn ^boolean not-every?\n 2221:   \"Returns false if (pred x) is logical true for every x in\n 2222    coll, else true.\"\n 2223    [pred coll] (not (every? pred coll)))\n 2224  \n 2225  (defn some\n 2226:   \"Returns the first logical true value of (pred x) for any x in coll,\n 2227    else nil.  One common idiom is to use a set as pred, for example\n 2228    this will return :fred if :fred is in the sequence, otherwise nil:\n ....\n 2233  \n 2234  (defn ^boolean not-any?\n 2235:   \"Returns false if (pred x) is logical true for any x in coll,\n 2236    else true.\"\n 2237    [pred coll] (not (some pred coll)))\n ....\n 2393  (defn every-pred\n 2394    \"Takes a set of predicates and returns a function f that returns true if all of its\n 2395:   composing predicates return a logical true value against all of its arguments, else it returns\n 2396    false. Note that f is short-circuiting in that it will stop execution on the first\n 2397:   argument that triggers a logical false result against the original predicates.\"\n 2398    ([p]\n 2399       (fn ep1\n ....\n 2431  \n 2432  (defn some-fn\n 2433:   \"Takes a set of predicates and returns a function f that returns the first logical true value\n 2434    returned by one of its composing predicates against any of its arguments, else it returns\n 2435:   logical false. Note that f is short-circuiting in that it will stop execution on the first\n 2436:   argument that triggers a logical true result against the original predicates.\"\n 2437    ([p]\n 2438       (fn sp1\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/clojure/browser/repl.cljs:\n   50                         (if (< n 10)\n   51                           (send-print url data (inc n))\n   52:                          (.log js/console (str \"Could not send \" data \" after \" n \" attempts.\")))))\n   53         (net/transmit conn url \"POST\" data nil 0))))\n   54  \n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/query.clj:\n   11  \n   12  (ns ^:shared io.pedestal.app.query\n   13:     \"A datalog-like query engine which can be used on both the client\n   14      and the server.\"\n   15      (:require [clojure.set :as set]))\n   ..\n   19      \"Generate a sequence of tuples.\"))\n   20  \n   21: (defn logic-variable? [x]\n   22    (and (symbol? x)\n   23         (= (first (name x)) \\?)))\n   ..\n   29  (defn unifier [bindings clause fact]\n   30    (reduce (fn [a [c t]]\n   31:             (let [c (if (and (logic-variable? c) (contains? bindings c))\n   32                        (get bindings c)\n   33                        c)]\n   34                (when a\n   35:                 (cond (logic-variable? c) (assoc a c t)\n   36                        (= c t) a\n   37                        :else nil))))\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/render.clj:\n   29      app-model))\n   30  \n   31: (defn log-fn [deltas]\n   32:   (platform/log-group\n   33     \"<----------------------------------------------------------------------\"\n   34     \"---------------------------------------------------------------------->\"\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/tree.clj:\n   29      about how to render it.\"\n   30      (:require [clojure.set :as set]\n   31:               [io.pedestal.app.util.log :as log]\n   32                [io.pedestal.app.query :as query]))\n   33  \n   ..\n  362    (reduce (fn [d k]\n  363              (if (< k t)\n  364:               (do (log/debug :gc (str \"GC: Deleting \" (count (get d k)) \" deltas at time \" k))\n  365                    (dissoc d k))\n  366                d))\n  ...\n  370  (defn gc [state]\n  371    (if *gc-deltas*\n  372:     (do (log/debug :gc \"GC: Running...\")\n  373          (let [t (:t state)\n  374                delete-t (- t 2)]\n  375:           (log/debug :gc (str \"GC: Deleting t < \" delete-t))\n  376:           (log/debug :gc (str \"GC: There are currently \"\n  377                                (count (apply concat (vals (:deltas state))))\n  378                                \" deltas.\"))\n  379            (update-in state [:deltas] (partial delete-deltas delete-t))))\n  380:     (do (log/debug :gc (str \"GC is turned off. There are \"\n  381                              (count (apply concat (vals (:deltas state))))\n  382                              \" accumulated deltas\"))\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/net/xhr.cljs:\n   94             retries)\n   95      (catch js/Error e\n   96:       (.log js/console e)\n   97        nil)))\n   98  \n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/render/push.clj:\n   16    (:require [io.pedestal.app.protocols :as p]\n   17              [io.pedestal.app.util.platform :as platform]\n   18:             [io.pedestal.app.util.log :as log]\n   19              [io.pedestal.app.tree :as tree]))\n   20  \n   ..\n  118      (new-id! this path (gensym)))\n  119    (new-id! [this path v]\n  120:     (log/info :in :new-id! :msg (str \"creating new id \" v \" at path \" path))\n  121      (swap! env assoc-in (conj path :id) v)\n  122      v)\n  ...\n  137    ([root-id handlers]\n  138       (renderer root-id handlers identity))\n  139:   ([root-id handlers log-fn]\n  140       (let [handlers (if (vector? handlers) (add-handlers handlers) handlers)\n  141             renderer (->DomRenderer (atom {:id root-id}))]\n  142         (fn [deltas input-queue]\n  143:          (log-fn deltas)\n  144           (doseq [d deltas]\n  145             (let [[op path] d\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/render/push/handlers/automatic.cljs:\n   11  \n   12  (ns io.pedestal.app.render.push.handlers.automatic\n   13:   (:require [io.pedestal.app.util.log :as log]\n   14              [io.pedestal.app.render.push :as render]\n   15              [io.pedestal.app.messages :as msg]\n   ..\n   25  \n   26  (defn get-missing-input [messages]\n   27:   (log/debug :messages messages)\n   28    (let [syms (msg/message-params messages)]\n   29      (if (seq syms)\n   ..\n   81        (let [modal-id (modal-id id transform-name)\n   82              continue-button-id (modal-continue-button-id id transform-name)]\n   83:         (str \"<div class='modal hide fade' id='\" modal-id \"' tabindex='-1' role='dialog'\"\n   84               \"     aria-labelledby='\" modal-id \"Label' aria-hidden='true'>\"\n   85               \"  <div class='modal-header'>\"\n   ..\n  129                   message)))\n  130  \n  131: (defn- submit-dialog-fn [id transform-name messages]\n  132    (let [syms (msg/message-params messages)]\n  133      (fn [_]\n  ...\n  151      (events/send-on-click (d/by-id modal-continue-button-id)\n  152                        input-queue\n  153:                       (submit-dialog-fn id transform-name messages))\n  154      (js/showModal (modal-id id transform-name))))\n  155  \n  ...\n  172                        \"</a>\"))\n  173        (if (seq syms)\n  174:         ;; Open the modal dialog for this event\n  175          (event/listen! (d/by-id button-id)\n  176                         :click\n  ...\n  183                            (get-missing-input (mapv #(assoc % :from :ui) messages))))\n  184        \n  185:       (log/debug :on-destroy! path)\n  186:       (render/on-destroy! r path #(do (log/debug :in (str \"data render unlisten! path: \"\n  187                                                            path\n  188                                                            \" button-id: \"\n  ...\n  258                              (fn [e]\n  259                                (event/prevent-default e)\n  260:                               ;; TODO: The modal dialog may be added to\n  261                                ;; the id that maps to modal-path. This means that the\n  262:                               ;; dialog is not tied to any node and will\n  263                                ;; not be deleted when a node is\n  264                                ;; deleted.\n  ...\n  273          id (or default-button-id node-id)]\n  274      (when id\n  275:       (log/debug :in (str \"unlistening! transform-name \" transform-name  \" path \" path \" with id \" id))\n  276        (event/unlisten! (d/by-id id) :click))\n  277      (when default-button-id\n  ...\n  280  (defn destroy! [r path]\n  281    (if-let [id (render/get-id r path)]\n  282:     (do (log/debug :in :default-exit :msg (str \"deleteing id \" id \" for path \" path))\n  283          (render/delete-id! r path)\n  284          (d/destroy! (d/by-id id)))\n  285:     (log/debug :in :default-exit :msg (str \"warning! no id \" id \" found for path \" (pr-str path)))))\n  286  \n  287  (defn default-exit [r [_ path] d]\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/util/console_log.cljs:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app.util.console-log)\n   13  \n   14: (defn log-map [m]\n   15    (let [d (assoc m :timestamp (.getTime (js/Date.)))]\n   16:     (.log js/console (pr-str d))))\n   17  \n   18: (defn log [& args]\n   19:   (log-map (apply hash-map args)))\n   20  \n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/util/log.cljs:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app.util.log\n   13    (:require [io.pedestal.app.util.observers :as observers]))\n   14  \n   15: (defn log\n   16    \"Logs a message at level (a keyword). The message will be a map\n   17    constructed from the key-value pairs supplied.\"\n   18    [level & keyvals]\n   19:   (observers/publish :log (assoc (apply hash-map keyvals) :level level)))\n   20  \n   21  (defn trace\n   ..\n   23    function being called, with arguments.\"\n   24    [call-expr]\n   25:   (log :trace :call call-expr))\n   26  \n   27  (defn error\n   28    \"Logs an error message.\"\n   29    [& keyvals]\n   30:   (apply log :error keyvals))\n   31  \n   32  (defn debug\n   ..\n   34    which is less verbose than :trace.\"\n   35    [& keyvals]\n   36:   (apply log :debug keyvals))\n   37  \n   38  (defn info\n   ..\n   40    want to record in tests of the production system.\"\n   41    [& keyvals]\n   42:   (apply log :info keyvals))\n   43  \n   44  (defn warn\n   45    \"Logs a :warn level message.\"\n   46    [& keyvals]\n   47:   (apply log :warn keyvals))\n   48  \n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app/util/platform.cljs:\n   40    (.get (goog.net.Cookies. js/document) cookie))\n   41  \n   42: (defn log-group [pre post coll]\n   43:   (.log js/console \"\\n\")\n   44:   (.log js/console pre)\n   45    (doseq [d coll]\n   46:     (.log js/console (pr-str d)))\n   47:   (.log js/console post)\n   48:   (.log js/console \"\\n\"))\n   49  \n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app_tools/tooling.cljs:\n   14              [io.pedestal.app-tools.rendering-view.record :as record]\n   15              [io.pedestal.app.util.observers :as observers]\n   16:             [io.pedestal.app.util.console-log :as console-log]\n   17              [io.pedestal.app.net.repl-client :as repl-client]))\n   18  \n   ..\n   22    app)\n   23  \n   24: (defn ^:export add-logging [app]\n   25    (when app\n   26:     (observers/subscribe :log console-log/log-map))\n   27    app)\n   28  \n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app_tools/rendering_view/client.cljs:\n   18              [domina.events :as events]\n   19              [io.pedestal.app.net.repl-client :as repl-client]\n   20:             [io.pedestal.app.util.log :as log]\n   21              [io.pedestal.app.util.observers :as observers]\n   22:             [io.pedestal.app.util.console-log :as console-log]\n   23              [io.pedestal.app.protocols :as p]\n   24              [io.pedestal.app.util.platform :as platform]\n   ..\n   40          (run-deltas next-step)\n   41          (update-in [:index] inc))\n   42:     (do (.log js/console \"At the end of the recording, can't move forward\")\n   43          state)))\n   44  \n   45  (defn step-back [state]\n   46    (if (zero? (:index state))\n   47:     (do (.log js/console \"At index 0, can't move back\")\n   48          state)\n   49      (let [index (dec (:index state))\n   ..\n   78    p/PutMessage\n   79    (put-message [this message]\n   80:     (log/debug :in :SinkInputQueue :discard-message message)))\n   81  \n   82  (defn on-error [response]\n   83:   (log/error :error response))\n   84  \n   85  (defn initialize-step-recording [state recording index]\n   ..\n  125  (defn run-recording [recording-name mode]\n  126    (let [uri (xhr/url (str \"/_tools/render/recordings/\" recording-name))]\n  127:     (log/info :in :run-recording :uri uri)\n  128      (xhr/request (gensym)\n  129                   uri\n  ...\n  138      (run-recording recording-name mode)))\n  139  \n  140: (defn main [config log?]\n  141:   (when log? (observers/subscribe :log console-log/log-map))\n  142:   (log/debug :in :start :msg \"Starting the render driver\")\n  143    (let [input-queue (->SinkInputQueue)\n  144          render-fn (render/renderer \"content\" config)]\n  ...\n  149                     (when (not= o n)\n  150                       (let [deltas (ui-tree/since-t n (ui-tree/t o))]\n  151:                        (platform/log-group\n  152                          \"<----------------------------------------------------------------------\"\n  153                          \"---------------------------------------------------------------------->\"\n\n/Users/ndrw/kmc-booking/booking-app/out/public/generated-js/out/io/pedestal/app_tools/rendering_view/record.cljs:\n   29          t0 (tree/t empty-tree)\n   30          new-tree (tree/apply-deltas empty-tree [current-app-model])]\n   31:     (.log js/console (pr-str current-app-model))\n   32:     (.log js/console (pr-str (tree/expand-map current-app-model)))\n   33:     (.log js/console (pr-str t0))\n   34:     (.log js/console (pr-str new-tree))\n   35:     (.log js/console (pr-str (vec (tree/since-t new-tree t0))))\n   36      (vec (tree/since-t new-tree t0))))\n   37  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/project.clj:\n   15                   [org.clojure/tools.namespace \"0.2.1\"]\n   16                   [domina \"1.0.1\"]\n   17:                  [ch.qos.logback/logback-classic \"1.0.6\"]\n   18                   [org.clojure/clojurescript \"0.0-1450\"]\n   19                   [io.pedestal/pedestal.app \"0.1.2\"]\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/behavior.clj:\n   15              [io.pedestal.app.messages :as msg]\n   16              [io.pedestal.app.util.platform :as platform]\n   17:             [io.pedestal.app.util.log :as log]\n   18              [chat-client.util :as util]))\n   19  \n   ..\n   31                          (update-in [:sent] conj msg)\n   32                          (assoc :sending msg)))\n   33:     :clear-messages (do (log/debug :in :clear-messages :transform :outbound) (-> state\n   34                                 (assoc :sent [])\n   35                                 (dissoc :sending)))\n   ..\n   42                           :nickname (:nickname message) :text (:text message)}]\n   43                  (update-in state [:received] conj msg))\n   44:     :clear-messages (do (log/debug :in :clear-messages :transform :inbound) ( assoc state :received []))))\n   45  \n   46  (defn nickname-transform [state message]\n   ..\n   64  \n   65  (defn deleted-msgs [{:keys [old new]} k]\n   66:   (log/debug :in :deleted-msgs :old old :new new)\n   67    (let [o (set (k old))\n   68          n (set (k new))]\n   ..\n  105  (def ^:private initial-app-model\n  106    [{:chat\n  107:     {:log {}\n  108       :form\n  109       {:transforms\n  ...\n  113  (defn- new-deltas [value]\n  114    (vec (mapcat (fn [{:keys [id] :as msg}]\n  115:                  [[:node-create [:chat :log id] :map]\n  116:                   [:value [:chat :log id] msg]])\n  117                 value)))\n  118  \n  119  (defn- delete-deltas [value]\n  120    (vec (mapcat (fn [{:keys [id] :as msg}]\n  121:                  [[:node-destroy [:chat :log id]]])\n  122                 value)))\n  123  \n  124  (defn- update-deltas [value]\n  125    (mapv (fn [{:keys [id] :as msg}]\n  126:           [:value [:chat :log id] msg]) value))\n  127  \n  128  (defn- nickname-deltas [nickname]\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/app.cljs:\n   24  (defn ^:export main []\n   25    \n   26:   (.log js/console \"app::start\")\n   27    \n   28    (let [app (app/build behavior/chat-client)\n   29:         render-fn (push-render/renderer \"content\" (rendering/render-config) render/log-fn)\n   30          services (services/->Services app)]\n   31      (p/start services)\n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/rendering.cljs:\n  106     [:transform-enable  [:chat :form]   form-transform-enable]\n  107     [:transform-disable [:chat :form]   form-transform-disable]\n  108:    [:node-create       [:chat :log :*] create-message-node]\n  109:    [:node-destroy      [:chat :log :*] auto/default-exit]\n  110:    [:value             [:chat :log :*] update-message]])\n  111  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/services.cljs:\n   15              [io.pedestal.app.protocols :as p]\n   16              [io.pedestal.app.messages :as msg]\n   17:             [io.pedestal.app.util.log :as log]\n   18              [chat-client.util :as util]))\n   19  \n   ..\n   46                                      :id (:id msg)})\n   47                     2000)\n   48:       (.log js/console (str \"Send to Server: \" (pr-str message))))))\n   49  \n   50  (defrecord Services [app]\n   ..\n   56                           (fn [e]\n   57                             (let [data (r/read-string (.-data e))]\n   58:                              (.log js/console e)\n   59                               (p/put-message (:input app)\n   60                                              {msg/topic :inbound\n   ..\n   67                           \"open\"\n   68                           (fn [e]\n   69:                            (.log js/console e))\n   70                           false)\n   71        (.addEventListener source\n   72                           \"error\"\n   73                           (fn [e]\n   74:                            (.log js/console e))\n   75                           false)\n   76:       (.log js/console source)))\n   77    (stop [this]))\n   78  \n   ..\n   80    (when-let [msg (:out-message message)]\n   81      (let [body (pr-str {:text (:text msg) :nickname (:nickname msg)})\n   82:           log (fn [args]\n   83:                 (.log js/console (pr-str args))\n   84:                 (.log js/console (:xhr args)))]\n   85        (xhr/request (gensym)\n   86                     \"/msgs\"\n   ..\n   88                     :headers {\"Content-Type\" \"application/edn\"}\n   89                     :body body\n   90:                    :on-success log\n   91:                    :on-error log))\n   92:     (.log js/console (str \"Send to Server: \" (pr-str message)))))\n   93  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/simulated/services.cljs:\n   44                                              :nickname (:nickname msg)\n   45                                              :id (:id msg)}) 500)\n   46:     (.log js/console (str \"Send to Server: \" (pr-str message)))))\n   47  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/simulated/start.cljs:\n   25  \n   26  (defn ^:export main []\n   27:   (.log js/console \"app.simulated::start\")\n   28    (let [app (app/build behavior/chat-client)\n   29          uri (goog.Uri. (.toString (.-location js/document)))\n   ..\n   32                          auto/data-renderer-config\n   33                          (rendering/render-config))\n   34:         render-fn (push-render/renderer \"content\" render-config render/log-fn)\n   35          services (services/->MockServices app)\n   36          app-model (render/consume-app-model app render-fn)]\n\n/Users/ndrw/pedestal-samples/chat/chat-client/config/config.clj:\n   21              :triggers {:html [#\"chat_client/web/app.js\"]}}\n   22      :application {:generated-javascript \"generated-js\"\n   23:                   :api-server {:host \"localhost\" :port 8080 :log-fn nil}\n   24                    :default-template \"application.html\"\n   25                    :output-root :public}\n   ..\n   30                          :dir \"chat\"\n   31                          :renderer 'chat_client.web.rendering\n   32:                         :logging? true\n   33                          :order 2}}\n   34      :aspects {:data-ui {:uri \"/chat-client-data-ui.html\"\n   ..\n   39                          :main 'chat_client.web.simulated.start\n   40                          :recording? true\n   41:                         :logging? true\n   42                          :template \"tooling.html\"\n   43                          :output-root :tools-public}\n   ..\n   47                     :out-file \"chat-client-dev-ui.js\"\n   48                     :main 'chat_client.web.simulated.start\n   49:                    :logging? true\n   50                     :output-root :tools-public}\n   51                :development {:uri \"/chat-client-dev.html\"\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/domina.cljs:\n  109  \n  110  (def *debug* true)\n  111: (defn log-debug [& mesg]\n  112    (when (and *debug* (not (= (.-console js/window) js/undefined)))\n  113:     (.log js/console (apply str  mesg))))\n  114  \n  115: (defn log [& mesg]\n  116    (when (.-console js/window)\n  117:     (.log js/console (apply str mesg))))\n  118  \n  119  (defn by-id\n  ...\n  470    respond to .length, but are not arrays nor NodeSets. This returns a\n  471    real sequence view of such objects. If passed an object that is not\n  472:   a logical sequence at all, returns a single-item seq containing the\n  473    object.\"\n  474    [list-thing]\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/cljs/core.cljs:\n  693  \n  694  (defn ^boolean not\n  695:   \"Returns true if x is logical false, false otherwise.\"\n  696    [x] (if x false true))\n  697  \n  ...\n 1008    returns false.  Note that for numerically indexed collections like\n 1009    vectors and arrays, this tests if the numeric key is within the\n 1010:   range of indexes. 'contains?' operates constant or logarithmic time;\n 1011    it will not perform a linear search for a value.  See also 'some'.\"\n 1012    [coll v]\n ....\n 1043  (defn compare\n 1044    \"Comparator. Returns a negative number, zero, or a positive number\n 1045:   when x is logically 'less than', 'equal to', or 'greater than'\n 1046    y. Uses IComparable if available and google.array.defaultCompare for objects\n 1047   of the same type and special-cases nil to be less than any other object.\"\n ....\n 2144  \n 2145  (defn ^boolean every?\n 2146:   \"Returns true if (pred x) is logical true for every x in coll, else\n 2147    false.\"\n 2148    [pred coll]\n ....\n 2153  \n 2154  (defn ^boolean not-every?\n 2155:   \"Returns false if (pred x) is logical true for every x in\n 2156    coll, else true.\"\n 2157    [pred coll] (not (every? pred coll)))\n 2158  \n 2159  (defn some\n 2160:   \"Returns the first logical true value of (pred x) for any x in coll,\n 2161    else nil.  One common idiom is to use a set as pred, for example\n 2162    this will return :fred if :fred is in the sequence, otherwise nil:\n ....\n 2167  \n 2168  (defn ^boolean not-any?\n 2169:   \"Returns false if (pred x) is logical true for any x in coll,\n 2170    else true.\"\n 2171    [pred coll] (not (some pred coll)))\n ....\n 2327  (defn every-pred\n 2328    \"Takes a set of predicates and returns a function f that returns true if all of its\n 2329:   composing predicates return a logical true value against all of its arguments, else it returns\n 2330    false. Note that f is short-circuiting in that it will stop execution on the first\n 2331:   argument that triggers a logical false result against the original predicates.\"\n 2332    ([p]\n 2333       (fn ep1\n ....\n 2365  \n 2366  (defn some-fn\n 2367:   \"Takes a set of predicates and returns a function f that returns the first logical true value\n 2368    returned by one of its composing predicates against any of its arguments, else it returns\n 2369:   logical false. Note that f is short-circuiting in that it will stop execution on the first\n 2370:   argument that triggers a logical true result against the original predicates.\"\n 2371    ([p]\n 2372       (fn sp1\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/clojure/browser/repl.cljs:\n   50                         (if (< n 10)\n   51                           (send-print url data (inc n))\n   52:                          (.log js/console (str \"Could not send \" data \" after \" n \" attempts.\")))))\n   53         (net/transmit conn url \"POST\" data nil 0))))\n   54  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/query.clj:\n   11  \n   12  (ns ^:shared io.pedestal.app.query\n   13:     \"A datalog-like query engine which can be used on both the client\n   14      and the server.\"\n   15      (:require [clojure.set :as set]))\n   ..\n   19      \"Generate a sequence of tuples.\"))\n   20  \n   21: (defn logic-variable? [x]\n   22    (and (symbol? x)\n   23         (= (first (name x)) \\?)))\n   ..\n   29  (defn unifier [bindings clause fact]\n   30    (reduce (fn [a [c t]]\n   31:             (let [c (if (and (logic-variable? c) (contains? bindings c))\n   32                        (get bindings c)\n   33                        c)]\n   34                (when a\n   35:                 (cond (logic-variable? c) (assoc a c t)\n   36                        (= c t) a\n   37                        :else nil))))\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/render.clj:\n   29      app-model))\n   30  \n   31: (defn log-fn [deltas]\n   32:   (platform/log-group\n   33     \"<----------------------------------------------------------------------\"\n   34     \"---------------------------------------------------------------------->\"\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/tree.clj:\n   29      about how to render it.\"\n   30      (:require [clojure.set :as set]\n   31:               [io.pedestal.app.util.log :as log]\n   32                [io.pedestal.app.query :as query]))\n   33  \n   ..\n  362    (reduce (fn [d k]\n  363              (if (< k t)\n  364:               (do (log/debug :gc (str \"GC: Deleting \" (count (get d k)) \" deltas at time \" k))\n  365                    (dissoc d k))\n  366                d))\n  ...\n  370  (defn gc [state]\n  371    (if *gc-deltas*\n  372:     (do (log/debug :gc \"GC: Running...\")\n  373          (let [t (:t state)\n  374                delete-t (- t 2)]\n  375:           (log/debug :gc (str \"GC: Deleting t < \" delete-t))\n  376:           (log/debug :gc (str \"GC: There are currently \"\n  377                                (count (apply concat (vals (:deltas state))))\n  378                                \" deltas.\"))\n  379            (update-in state [:deltas] (partial delete-deltas delete-t))))\n  380:     (do (log/debug :gc (str \"GC is turned off. There are \"\n  381                              (count (apply concat (vals (:deltas state))))\n  382                              \" accumulated deltas\"))\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/net/xhr.cljs:\n   94             retries)\n   95      (catch js/Error e\n   96:       (.log js/console e)\n   97        nil)))\n   98  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/render/push.clj:\n   16    (:require [io.pedestal.app.protocols :as p]\n   17              [io.pedestal.app.util.platform :as platform]\n   18:             [io.pedestal.app.util.log :as log]\n   19              [io.pedestal.app.tree :as tree]))\n   20  \n   ..\n  118      (new-id! this path (gensym)))\n  119    (new-id! [this path v]\n  120:     (log/info :in :new-id! :msg (str \"creating new id \" v \" at path \" path))\n  121      (swap! env assoc-in (conj path :id) v)\n  122      v)\n  ...\n  137    ([root-id handlers]\n  138       (renderer root-id handlers identity))\n  139:   ([root-id handlers log-fn]\n  140       (let [handlers (if (vector? handlers) (add-handlers handlers) handlers)\n  141             renderer (->DomRenderer (atom {:id root-id}))]\n  142         (fn [deltas input-queue]\n  143:          (log-fn deltas)\n  144           (doseq [d deltas]\n  145             (let [[op path] d\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/render/push/handlers/automatic.cljs:\n   11  \n   12  (ns io.pedestal.app.render.push.handlers.automatic\n   13:   (:require [io.pedestal.app.util.log :as log]\n   14              [io.pedestal.app.render.push :as render]\n   15              [io.pedestal.app.messages :as msg]\n   ..\n   25  \n   26  (defn get-missing-input [messages]\n   27:   (log/debug :messages messages)\n   28    (let [syms (msg/message-params messages)]\n   29      (if (seq syms)\n   ..\n   81        (let [modal-id (modal-id id transform-name)\n   82              continue-button-id (modal-continue-button-id id transform-name)]\n   83:         (str \"<div class='modal hide fade' id='\" modal-id \"' tabindex='-1' role='dialog'\"\n   84               \"     aria-labelledby='\" modal-id \"Label' aria-hidden='true'>\"\n   85               \"  <div class='modal-header'>\"\n   ..\n  129                   message)))\n  130  \n  131: (defn- submit-dialog-fn [id transform-name messages]\n  132    (let [syms (msg/message-params messages)]\n  133      (fn [_]\n  ...\n  151      (events/send-on-click (d/by-id modal-continue-button-id)\n  152                        input-queue\n  153:                       (submit-dialog-fn id transform-name messages))\n  154      (js/showModal (modal-id id transform-name))))\n  155  \n  ...\n  172                        \"</a>\"))\n  173        (if (seq syms)\n  174:         ;; Open the modal dialog for this event\n  175          (event/listen! (d/by-id button-id)\n  176                         :click\n  ...\n  183                            (get-missing-input (mapv #(assoc % :from :ui) messages))))\n  184        \n  185:       (log/debug :on-destroy! path)\n  186:       (render/on-destroy! r path #(do (log/debug :in (str \"data render unlisten! path: \"\n  187                                                            path\n  188                                                            \" button-id: \"\n  ...\n  258                              (fn [e]\n  259                                (event/prevent-default e)\n  260:                               ;; TODO: The modal dialog may be added to\n  261                                ;; the id that maps to modal-path. This means that the\n  262:                               ;; dialog is not tied to any node and will\n  263                                ;; not be deleted when a node is\n  264                                ;; deleted.\n  ...\n  273          id (or default-button-id node-id)]\n  274      (when id\n  275:       (log/debug :in (str \"unlistening! transform-name \" transform-name  \" path \" path \" with id \" id))\n  276        (event/unlisten! (d/by-id id) :click))\n  277      (when default-button-id\n  ...\n  280  (defn destroy! [r path]\n  281    (if-let [id (render/get-id r path)]\n  282:     (do (log/debug :in :default-exit :msg (str \"deleteing id \" id \" for path \" path))\n  283          (render/delete-id! r path)\n  284          (d/destroy! (d/by-id id)))\n  285:     (log/debug :in :default-exit :msg (str \"warning! no id \" id \" found for path \" (pr-str path)))))\n  286  \n  287  (defn default-exit [r [_ path] d]\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/util/console_log.cljs:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app.util.console-log)\n   13  \n   14: (defn log-map [m]\n   15    (let [d (assoc m :timestamp (.getTime (js/Date.)))]\n   16:     (.log js/console (pr-str d))))\n   17  \n   18: (defn log [& args]\n   19:   (log-map (apply hash-map args)))\n   20  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/util/log.cljs:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app.util.log\n   13    (:require [io.pedestal.app.util.observers :as observers]))\n   14  \n   15: (defn log\n   16    \"Logs a message at level (a keyword). The message will be a map\n   17    constructed from the key-value pairs supplied.\"\n   18    [level & keyvals]\n   19:   (observers/publish :log (assoc (apply hash-map keyvals) :level level)))\n   20  \n   21  (defn trace\n   ..\n   23    function being called, with arguments.\"\n   24    [call-expr]\n   25:   (log :trace :call call-expr))\n   26  \n   27  (defn error\n   28    \"Logs an error message.\"\n   29    [& keyvals]\n   30:   (apply log :error keyvals))\n   31  \n   32  (defn debug\n   ..\n   34    which is less verbose than :trace.\"\n   35    [& keyvals]\n   36:   (apply log :debug keyvals))\n   37  \n   38  (defn info\n   ..\n   40    want to record in tests of the production system.\"\n   41    [& keyvals]\n   42:   (apply log :info keyvals))\n   43  \n   44  (defn warn\n   45    \"Logs a :warn level message.\"\n   46    [& keyvals]\n   47:   (apply log :warn keyvals))\n   48  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app/util/platform.cljs:\n   40    (.get (goog.net.Cookies. js/document) cookie))\n   41  \n   42: (defn log-group [pre post coll]\n   43:   (.log js/console \"\\n\")\n   44:   (.log js/console pre)\n   45    (doseq [d coll]\n   46:     (.log js/console (pr-str d)))\n   47:   (.log js/console post)\n   48:   (.log js/console \"\\n\"))\n   49  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app_tools/tooling.cljs:\n   14              [io.pedestal.app-tools.rendering-view.record :as record]\n   15              [io.pedestal.app.util.observers :as observers]\n   16:             [io.pedestal.app.util.console-log :as console-log]\n   17              [io.pedestal.app.net.repl-client :as repl-client]))\n   18  \n   ..\n   22    app)\n   23  \n   24: (defn ^:export add-logging [app]\n   25    (when app\n   26:     (observers/subscribe :log console-log/log-map))\n   27    app)\n   28  \n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app_tools/rendering_view/client.cljs:\n   18              [domina.events :as events]\n   19              [io.pedestal.app.net.repl-client :as repl-client]\n   20:             [io.pedestal.app.util.log :as log]\n   21              [io.pedestal.app.util.observers :as observers]\n   22:             [io.pedestal.app.util.console-log :as console-log]\n   23              [io.pedestal.app.protocols :as p]\n   24              [io.pedestal.app.util.platform :as platform]\n   ..\n   40          (run-deltas next-step)\n   41          (update-in [:index] inc))\n   42:     (do (.log js/console \"At the end of the recording, can't move forward\")\n   43          state)))\n   44  \n   45  (defn step-back [state]\n   46    (if (zero? (:index state))\n   47:     (do (.log js/console \"At index 0, can't move back\")\n   48          state)\n   49      (let [index (dec (:index state))\n   ..\n   78    p/PutMessage\n   79    (put-message [this message]\n   80:     (log/debug :in :SinkInputQueue :discard-message message)))\n   81  \n   82  (defn on-error [response]\n   83:   (log/error :error response))\n   84  \n   85  (defn initialize-step-recording [state recording index]\n   ..\n  125  (defn run-recording [recording-name mode]\n  126    (let [uri (xhr/url (str \"/_tools/render/recordings/\" recording-name))]\n  127:     (log/info :in :run-recording :uri uri)\n  128      (xhr/request (gensym)\n  129                   uri\n  ...\n  138      (run-recording recording-name mode)))\n  139  \n  140: (defn main [config log?]\n  141:   (when log? (observers/subscribe :log console-log/log-map))\n  142:   (log/debug :in :start :msg \"Starting the render driver\")\n  143    (let [input-queue (->SinkInputQueue)\n  144          render-fn (render/renderer \"content\" config)]\n  ...\n  149                     (when (not= o n)\n  150                       (let [deltas (ui-tree/since-t n (ui-tree/t o))]\n  151:                        (platform/log-group\n  152                          \"<----------------------------------------------------------------------\"\n  153                          \"---------------------------------------------------------------------->\"\n\n/Users/ndrw/pedestal-samples/chat/chat-client/out/public/generated-js/out/io/pedestal/app_tools/rendering_view/record.cljs:\n   29          t0 (tree/t empty-tree)\n   30          new-tree (tree/apply-deltas empty-tree [current-app-model])]\n   31:     (.log js/console (pr-str current-app-model))\n   32:     (.log js/console (pr-str (tree/expand-map current-app-model)))\n   33:     (.log js/console (pr-str t0))\n   34:     (.log js/console (pr-str new-tree))\n   35:     (.log js/console (pr-str (vec (tree/since-t new-tree t0))))\n   36      (vec (tree/since-t new-tree t0))))\n   37  \n\n/Users/ndrw/pedestal-samples/chat/chat-server/project.clj:\n   18                   [io.pedestal/pedestal.service \"0.1.2\"]\n   19                   [io.pedestal/pedestal.jetty \"0.1.2\"]\n   20:                  [ch.qos.logback/logback-classic \"1.0.7\"]\n   21                   [org.slf4j/jul-to-slf4j \"1.7.2\"]\n   22                   [org.slf4j/jcl-over-slf4j \"1.7.2\"]\n   23:                  [org.slf4j/log4j-over-slf4j \"1.7.2\"]]\n   24    :profiles {:dev {:source-paths [\"dev\"]}}\n   25    :resource-paths [\"config\" \"resources\"]\n\n/Users/ndrw/pedestal-samples/chat/chat-server/src/chat_server/service.clj:\n   13    (:require [io.pedestal.service.http.servlet :as ps]\n   14              [io.pedestal.service.http :as bootstrap]\n   15:             [io.pedestal.service.log :as log]\n   16              ;; the impl dependencies will go away\n   17              [io.pedestal.service.impl.interceptor :as interceptor]\n   ..\n   43    \"Remove `context` from subscribers map and end the event stream.\"\n   44    [context]\n   45:   (log/info :msg \"removing subscriber\")\n   46    (swap! subscribers dissoc (context-key context))\n   47    (end-event-stream context))\n   ..\n   55    [context msg]\n   56    (try\n   57:     (log/info :msg \"calling event sending fn\")\n   58      (send-event context \"msg\" msg)\n   59      (catch java.io.IOException ioe\n   60:       (log/error :msg \"Exception from event send\"\n   61                   :exception ioe)\n   62        (remove-subscriber context))))\n   ..\n   65    \"Send `msg` to all event streams in subscribers map.\"\n   66    [msg]\n   67:   (log/info :msg \"sending to all subscribers\")\n   68    (doseq [sse-context (vals @subscribers)]\n   69      (send-to-subscriber sse-context msg)))\n   ..\n   72    \"Terminal interceptor for publishing msg to subscribers.\"\n   73    [{msg-data :edn-params :as request}]\n   74:   (log/info :message \"publishing msg\"\n   75              :request request\n   76              :msg-data msg-data)\n\n/Users/ndrw/pedestal/app/project.clj:\n   15    :dependencies [[org.clojure/clojure \"1.5.0\"]\n   16                   [org.clojure/clojurescript \"0.0-1450\"]\n   17:                  [ch.qos.logback/logback-classic \"1.0.6\"]\n   18                   [enlive \"1.0.0\" :exclusions [org.clojure/clojure]]\n   19                   [domina \"1.0.1\"]]\n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/query.clj:\n   11  \n   12  (ns ^:shared io.pedestal.app.query\n   13:     \"A datalog-like query engine which can be used on both the client\n   14      and the server.\"\n   15      (:require [clojure.set :as set]))\n   ..\n   19      \"Generate a sequence of tuples.\"))\n   20  \n   21: (defn logic-variable? [x]\n   22    (and (symbol? x)\n   23         (= (first (name x)) \\?)))\n   ..\n   29  (defn unifier [bindings clause fact]\n   30    (reduce (fn [a [c t]]\n   31:             (let [c (if (and (logic-variable? c) (contains? bindings c))\n   32                        (get bindings c)\n   33                        c)]\n   34                (when a\n   35:                 (cond (logic-variable? c) (assoc a c t)\n   36                        (= c t) a\n   37                        :else nil))))\n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/render.clj:\n   29      app-model))\n   30  \n   31: (defn log-fn [deltas]\n   32:   (platform/log-group\n   33     \"<----------------------------------------------------------------------\"\n   34     \"---------------------------------------------------------------------->\"\n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/tree.clj:\n   29      about how to render it.\"\n   30      (:require [clojure.set :as set]\n   31:               [io.pedestal.app.util.log :as log]\n   32                [io.pedestal.app.query :as query]))\n   33  \n   ..\n  362    (reduce (fn [d k]\n  363              (if (< k t)\n  364:               (do (log/debug :gc (str \"GC: Deleting \" (count (get d k)) \" deltas at time \" k))\n  365                    (dissoc d k))\n  366                d))\n  ...\n  370  (defn gc [state]\n  371    (if *gc-deltas*\n  372:     (do (log/debug :gc \"GC: Running...\")\n  373          (let [t (:t state)\n  374                delete-t (- t 2)]\n  375:           (log/debug :gc (str \"GC: Deleting t < \" delete-t))\n  376:           (log/debug :gc (str \"GC: There are currently \"\n  377                                (count (apply concat (vals (:deltas state))))\n  378                                \" deltas.\"))\n  379            (update-in state [:deltas] (partial delete-deltas delete-t))))\n  380:     (do (log/debug :gc (str \"GC is turned off. There are \"\n  381                              (count (apply concat (vals (:deltas state))))\n  382                              \" accumulated deltas\"))\n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/net/xhr.cljs:\n   94             retries)\n   95      (catch js/Error e\n   96:       (.log js/console e)\n   97        nil)))\n   98  \n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/render/push.clj:\n   16    (:require [io.pedestal.app.protocols :as p]\n   17              [io.pedestal.app.util.platform :as platform]\n   18:             [io.pedestal.app.util.log :as log]\n   19              [io.pedestal.app.tree :as tree]))\n   20  \n   ..\n  118      (new-id! this path (gensym)))\n  119    (new-id! [this path v]\n  120:     (log/info :in :new-id! :msg (str \"creating new id \" v \" at path \" path))\n  121      (swap! env assoc-in (conj path :id) v)\n  122      v)\n  ...\n  137    ([root-id handlers]\n  138       (renderer root-id handlers identity))\n  139:   ([root-id handlers log-fn]\n  140       (let [handlers (if (vector? handlers) (add-handlers handlers) handlers)\n  141             renderer (->DomRenderer (atom {:id root-id}))]\n  142         (fn [deltas input-queue]\n  143:          (log-fn deltas)\n  144           (doseq [d deltas]\n  145             (let [[op path] d\n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/render/push/handlers/automatic.cljs:\n   11  \n   12  (ns io.pedestal.app.render.push.handlers.automatic\n   13:   (:require [io.pedestal.app.util.log :as log]\n   14              [io.pedestal.app.render.push :as render]\n   15              [io.pedestal.app.messages :as msg]\n   ..\n   25  \n   26  (defn get-missing-input [messages]\n   27:   (log/debug :messages messages)\n   28    (let [syms (msg/message-params messages)]\n   29      (if (seq syms)\n   ..\n   81        (let [modal-id (modal-id id transform-name)\n   82              continue-button-id (modal-continue-button-id id transform-name)]\n   83:         (str \"<div class='modal hide fade' id='\" modal-id \"' tabindex='-1' role='dialog'\"\n   84               \"     aria-labelledby='\" modal-id \"Label' aria-hidden='true'>\"\n   85               \"  <div class='modal-header'>\"\n   ..\n  129                   message)))\n  130  \n  131: (defn- submit-dialog-fn [id transform-name messages]\n  132    (let [syms (msg/message-params messages)]\n  133      (fn [_]\n  ...\n  151      (events/send-on-click (d/by-id modal-continue-button-id)\n  152                        input-queue\n  153:                       (submit-dialog-fn id transform-name messages))\n  154      (js/showModal (modal-id id transform-name))))\n  155  \n  ...\n  172                        \"</a>\"))\n  173        (if (seq syms)\n  174:         ;; Open the modal dialog for this event\n  175          (event/listen! (d/by-id button-id)\n  176                         :click\n  ...\n  183                            (get-missing-input (mapv #(assoc % :from :ui) messages))))\n  184        \n  185:       (log/debug :on-destroy! path)\n  186:       (render/on-destroy! r path #(do (log/debug :in (str \"data render unlisten! path: \"\n  187                                                            path\n  188                                                            \" button-id: \"\n  ...\n  258                              (fn [e]\n  259                                (event/prevent-default e)\n  260:                               ;; TODO: The modal dialog may be added to\n  261                                ;; the id that maps to modal-path. This means that the\n  262:                               ;; dialog is not tied to any node and will\n  263                                ;; not be deleted when a node is\n  264                                ;; deleted.\n  ...\n  273          id (or default-button-id node-id)]\n  274      (when id\n  275:       (log/debug :in (str \"unlistening! transform-name \" transform-name  \" path \" path \" with id \" id))\n  276        (event/unlisten! (d/by-id id) :click))\n  277      (when default-button-id\n  ...\n  280  (defn destroy! [r path]\n  281    (if-let [id (render/get-id r path)]\n  282:     (do (log/debug :in :default-exit :msg (str \"deleteing id \" id \" for path \" path))\n  283          (render/delete-id! r path)\n  284          (d/destroy! (d/by-id id)))\n  285:     (log/debug :in :default-exit :msg (str \"warning! no id \" id \" found for path \" (pr-str path)))))\n  286  \n  287  (defn default-exit [r [_ path] d]\n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/util/console_log.cljs:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app.util.console-log)\n   13  \n   14: (defn log-map [m]\n   15    (let [d (assoc m :timestamp (.getTime (js/Date.)))]\n   16:     (.log js/console (pr-str d))))\n   17  \n   18: (defn log [& args]\n   19:   (log-map (apply hash-map args)))\n   20  \n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/util/log.clj:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app.util.log\n   13    (:require clojure.string)\n   14    (:import [org.slf4j LoggerFactory]))\n   15  \n   16: (defn- log-expr [form level keyvals]\n   17    ;; Pull out :exception, otherwise preserve order\n   18    (let [exception' (:exception (apply array-map keyvals))\n   19          keyvals' (mapcat identity (remove #(= :exception (first %))\n   20                                            (partition 2 keyvals)))\n   21:         logger' (gensym \"logger\")  ; for nested syntax-quote\n   22          string' (gensym \"string\")\n   23          enabled-method' (symbol (str \".is\"\n   24                                       (clojure.string/capitalize (name level))\n   25                                       \"Enabled\"))\n   26:         log-method' (symbol (str \".\" (name level)))]\n   27:     `(let [~logger' (LoggerFactory/getLogger ~(name (ns-name *ns*)))]\n   28:        (when (~enabled-method' ~logger')\n   29           (let [data# (array-map :line ~(:line (meta form)) ~@keyvals')\n   30                 ~string' (binding [*print-length* 80] (pr-str data#))]\n   31             ~(if exception'\n   32:               `(~log-method' ~logger' ~string' ~exception')\n   33:               `(~log-method' ~logger' ~string')))))))\n   34  \n   35: (defmacro trace [expr] (log-expr &form :trace [:expr expr]))\n   36  \n   37: (defmacro debug [& keyvals] (log-expr &form :debug keyvals))\n   38  \n   39: (defmacro info [& keyvals] (log-expr &form :info keyvals))\n   40  \n   41: (defmacro warn [& keyvals] (log-expr &form :warn keyvals))\n   42  \n   43: (defmacro error [& keyvals] (log-expr &form :error keyvals))\n   44  \n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/util/log.cljs:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.app.util.log\n   13    (:require [io.pedestal.app.util.observers :as observers]))\n   14  \n   15: (defn log\n   16    \"Logs a message at level (a keyword). The message will be a map\n   17    constructed from the key-value pairs supplied.\"\n   18    [level & keyvals]\n   19:   (observers/publish :log (assoc (apply hash-map keyvals) :level level)))\n   20  \n   21  (defn trace\n   ..\n   23    function being called, with arguments.\"\n   24    [call-expr]\n   25:   (log :trace :call call-expr))\n   26  \n   27  (defn error\n   28    \"Logs an error message.\"\n   29    [& keyvals]\n   30:   (apply log :error keyvals))\n   31  \n   32  (defn debug\n   ..\n   34    which is less verbose than :trace.\"\n   35    [& keyvals]\n   36:   (apply log :debug keyvals))\n   37  \n   38  (defn info\n   ..\n   40    want to record in tests of the production system.\"\n   41    [& keyvals]\n   42:   (apply log :info keyvals))\n   43  \n   44  (defn warn\n   45    \"Logs a :warn level message.\"\n   46    [& keyvals]\n   47:   (apply log :warn keyvals))\n   48  \n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/util/platform.clj:\n   50    session-id)\n   51  \n   52: (defn log-group [pre post coll]\n   53    (println \"\\n\")\n   54    (println pre)\n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/util/platform.cljs:\n   40    (.get (goog.net.Cookies. js/document) cookie))\n   41  \n   42: (defn log-group [pre post coll]\n   43:   (.log js/console \"\\n\")\n   44:   (.log js/console pre)\n   45    (doseq [d coll]\n   46:     (.log js/console (pr-str d)))\n   47:   (.log js/console post)\n   48:   (.log js/console \"\\n\"))\n   49  \n\n/Users/ndrw/pedestal/app/src/io/pedestal/app/util/scheduler.clj:\n   12  (ns io.pedestal.app.util.scheduler\n   13    (:require [io.pedestal.app.protocols :as p]\n   14:             [io.pedestal.app.util.log :as log])\n   15    (:import (java.util.concurrent Callable Executors\n   16                                   ScheduledExecutorService\n   ..\n   51            (reify Thread$UncaughtExceptionHandler\n   52              (uncaughtException [this thread err]\n   53:               (log/error :exception err)))))))))\n   54  \n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app.clj:\n   39  \n   40     [\"config/config.clj\" (render \"config/config.clj\" data)]\n   41:    [\"config/logback.xml\" (render \"config/logback.xml\" data)]\n   42     [\"dev/user.clj\" (render \"dev/user.clj\" data)]\n   43     [\"dev/dev.clj\" (render \"dev/dev.clj\" data)]\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/project.clj:\n    4                   [org.clojure/clojurescript \"0.0-1586\"]\n    5                   [domina \"1.0.1\"]\n    6:                  [ch.qos.logback/logback-classic \"1.0.6\"]\n    7                   [io.pedestal/pedestal.app \"0.1.4-SNAPSHOT\"]\n    8                   [io.pedestal/pedestal.app-tools \"0.1.4-SNAPSHOT\"]]\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/app/src/start.cljs:\n   40      (app/begin app)\n   41      ;; Returning the app and app-model from the main function allows\n   42:     ;; the tooling to add support for useful features like logging\n   43      ;; and recording.\n   44      {:app app :app-model app-model}))\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/annotated/config/config.clj:\n   51                          ;; render configuration.\n   52                          :renderer '{{sanitized}}.rendering\n   53:                         ;; Enable logging of rendering data when in\n   54                          ;; this view.\n   55:                         :logging? true\n   56                          :order 2}}\n   57      ;; Each aspect provides a unique way to view and interact with\n   ..\n   74                          ;; Alt-Shift-R to start and stop recording.\n   75                          :recording? true\n   76:                         ;; Turn on logging\n   77:                         :logging? true\n   78                          ;; build output goes to tools/out/public\n   79                          :output-root :tools-public}\n   ..\n   82                              :out-file \"{{name}}-dev.js\"\n   83                              :main '{{sanitized}}.start\n   84:                             :logging? true\n   85                              :order 3}\n   86                :fresh {:uri \"/fresh.html\"\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/plain/project.clj:\n    4                   [org.clojure/clojurescript \"0.0-1586\"]\n    5                   [domina \"1.0.1\"]\n    6:                  [ch.qos.logback/logback-classic \"1.0.6\"]\n    7                   [io.pedestal/pedestal.app \"0.1.4-SNAPSHOT\"]\n    8                   [io.pedestal/pedestal.app-tools \"0.1.4-SNAPSHOT\"]]\n\n/Users/ndrw/pedestal/app-template/src/leiningen/new/pedestal_app/plain/config/config.clj:\n   15      :built-in {:render {:dir \"{{name}}\"\n   16                          :renderer '{{sanitized}}.rendering\n   17:                         :logging? true\n   18                          :order 2}}\n   19      :aspects {:data-ui {:uri \"/{{name}}-data-ui.html\"\n   ..\n   23                          :main '{{sanitized}}.simulated.start\n   24                          :recording? true\n   25:                         :logging? true\n   26                          :output-root :tools-public}\n   27                :development {:uri \"/{{name}}-dev.html\"\n   ..\n   29                              :out-file \"{{name}}-dev.js\"\n   30                              :main '{{sanitized}}.start\n   31:                             :logging? true\n   32                              :order 3}\n   33                :fresh {:uri \"/fresh.html\"\n\n/Users/ndrw/pedestal/app-tools/project.clj:\n   17                   [org.clojure/tools.namespace \"0.2.1\"]\n   18                   [org.clojure/java.classpath \"0.2.0\"]\n   19:                  [ch.qos.logback/logback-classic \"1.0.7\"]\n   20                   [org.slf4j/jul-to-slf4j \"1.7.2\"]\n   21                   [org.slf4j/jcl-over-slf4j \"1.7.2\"]\n   22:                  [org.slf4j/log4j-over-slf4j \"1.7.2\"]\n   23                   [io.pedestal/pedestal.app \"0.1.4-SNAPSHOT\"]\n   24                   [io.pedestal/pedestal.service \"0.1.4-SNAPSHOT\"]\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/build.clj:\n   19              [io.pedestal.app.util.scheduler :as scheduler]\n   20              [io.pedestal.app.protocols :as p]\n   21:             [io.pedestal.app.util.log :as log]\n   22              [io.pedestal.service.interceptor :as interceptor :refer [definterceptorfn]])\n   23    (:import [java.io File]))\n   ..\n  121  (defmethod transform-files :identity [_ fs]\n  122    (mapv (fn [f]\n  123:           (log/info :transform :identity :path (string/join File/separator (:path f)))\n  124            (assoc f\n  125              :from (string/join File/separator (:path f))\n  ...\n  129  (defmethod transform-files :copy [_ fs]\n  130    (doseq [f fs]\n  131:     (log/info :transform :copy :from (:from f) :to (:output-to f))\n  132      (let [to (io/file (:output-to f))]\n  133        (.mkdirs (.getParentFile to))\n  ...\n  136  (defmethod transform-files :write [_ fs]\n  137    (doseq [f fs]\n  138:     (log/info :transform :write :path (string/join File/separator (:path f)))\n  139      (let [file (:output-to f)]\n  140        (.mkdirs (.getParentFile (io/file file)))\n  ...\n  143  (defmethod transform-files :template [_ fs]\n  144    (mapv (fn [f]\n  145:           (log/info :transform :template :path (string/join File/separator (:path f)))\n  146            (assoc f\n  147              :content (load-html (io/file (string/join File/separator (:path f))))\n  ...\n  156        (.waitFor p)\n  157        (doseq [line (string/split-lines (slurp (.getInputStream p)))]\n  158:         (log/info :compass-output line)))\n  159      (catch Throwable e\n  160:       (log/error :msg \"Error trying to run 'compass compile'. scss files will be ignored!\"\n  161                   :exception e))))\n  162  \n  ...\n  201      (send build-agent (fn [_] (deliver p (try (build! config aspect)\n  202                                               (catch Throwable e\n  203:                                                (do (log/error :exception e)\n  204                                                     {:error (.getMessage e)}))))))\n  205      p))\n  ...\n  248         (let [t (System/currentTimeMillis)]\n  249           (doseq [aspect (build-aspects config request)]\n  250:            (log/info :msg (str \"LOGGING \" aspect))\n  251             @(thread-safe-build! config aspect))\n  252:          (log/info :msg \"Build finished\" t (- (System/currentTimeMillis) t) :units :ms)))\n  253       request)))\n  254  \n  ...\n  269             f (io/file (str dir \"/\" js))]\n  270         (when (.exists f)\n  271:          (log/info :message (str \"deleting file: \" (.getAbsolutePath f)))\n  272           (delete (.getAbsolutePath f))))))\n  273  \n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/compile.clj:\n   16              [clojure.tools.namespace.find :as ns-find]\n   17              [clojure.tools.namespace.file :as ns-file]\n   18:             [io.pedestal.app.util.log :as log])\n   19    (:import java.net.URL\n   20             java.io.File))\n   ..\n  111                            (filter #(= (:tag %) :cljs) sources))]\n  112          (doseq [f files]\n  113:           (log/info :task :forcing :js-path (:js-file-name f))\n  114            (delete-js-file options (:js-file-name f)))))))\n  115  \n  ...\n  127               (dependency-order\n  128                (flatten (map (fn [{:keys [js-file-name source]}]\n  129:                               (log/info :task :compiling :js-path js-file-name)\n  130                                (when (= (type source) java.io.File)\n  131                                  (.mkdirs source))\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/host_page.clj:\n  104      s))\n  105  \n  106: (defn- add-logging [s aspect]\n  107:   (if (:logging? aspect)\n  108      (-> s\n  109          (update-in [:requires] #(assoc % \"goog.require('io.pedestal.app_tools.tooling');\" (count %)))\n  110:         (update-in [:start] #(str \"io.pedestal.app_tools.tooling.add_logging(\" % \")\")))\n  111      s))\n  112  \n  ...\n  121                          :start (str main \".main()\")}\n  122                         (add-recording aspect)\n  123:                        (add-logging aspect))]\n  124          (conj (vec (map first (sort-by second (:requires script))))\n  125                (str (:start script) \";\"))))))\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/middleware.clj:\n   11  \n   12  (ns io.pedestal.app-tools.middleware\n   13:   (:require [io.pedestal.app.util.log :as log]\n   14              [io.pedestal.service.interceptor :refer [defon-response]])\n   15    (:import java.io.File))\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/service.clj:\n   12  (ns io.pedestal.app-tools.service\n   13    (:require [io.pedestal.service.http :as bootstrap]\n   14:             [io.pedestal.service.log :as log]\n   15              ;; the impl dependencies will go away\n   16              ;; these next two will collapse to one\n   ..\n   62     ::bootstrap/interceptors [default-cache-control-to-no-cache\n   63                               bootstrap/not-found\n   64:                              bootstrap/log-request\n   65                               servlet-interceptor/exception-debug\n   66                               middlewares/cookies\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/tooling.cljs:\n   14              [io.pedestal.app-tools.rendering-view.record :as record]\n   15              [io.pedestal.app.util.observers :as observers]\n   16:             [io.pedestal.app.util.console-log :as console-log]\n   17              [io.pedestal.app.net.repl-client :as repl-client]))\n   18  \n   ..\n   22    app)\n   23  \n   24: (defn ^:export add-logging [app]\n   25    (when app\n   26:     (observers/subscribe :log console-log/log-map))\n   27    app)\n   28  \n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/rendering_view/client.cljs:\n   18              [domina.events :as events]\n   19              [io.pedestal.app.net.repl-client :as repl-client]\n   20:             [io.pedestal.app.util.log :as log]\n   21              [io.pedestal.app.util.observers :as observers]\n   22:             [io.pedestal.app.util.console-log :as console-log]\n   23              [io.pedestal.app.protocols :as p]\n   24              [io.pedestal.app.util.platform :as platform]\n   ..\n   40          (run-deltas next-step)\n   41          (update-in [:index] inc))\n   42:     (do (.log js/console \"At the end of the recording, can't move forward\")\n   43          state)))\n   44  \n   45  (defn step-back [state]\n   46    (if (zero? (:index state))\n   47:     (do (.log js/console \"At index 0, can't move back\")\n   48          state)\n   49      (let [index (dec (:index state))\n   ..\n   78    p/PutMessage\n   79    (put-message [this message]\n   80:     (log/debug :in :SinkInputQueue :discard-message message)))\n   81  \n   82  (defn on-error [response]\n   83:   (log/error :error response))\n   84  \n   85  (defn initialize-step-recording [state recording index]\n   ..\n  125  (defn run-recording [recording-name mode]\n  126    (let [uri (xhr/url (str \"/_tools/render/recordings/\" recording-name))]\n  127:     (log/info :in :run-recording :uri uri)\n  128      (xhr/request (gensym)\n  129                   uri\n  ...\n  138      (run-recording recording-name mode)))\n  139  \n  140: (defn main [config log?]\n  141:   (when log? (observers/subscribe :log console-log/log-map))\n  142:   (log/debug :in :start :msg \"Starting the render driver\")\n  143    (let [input-queue (->SinkInputQueue)\n  144          render-fn (render/renderer \"content\" config)]\n  ...\n  149                     (when (not= o n)\n  150                       (let [deltas (ui-tree/since-t n (ui-tree/t o))]\n  151:                        (platform/log-group\n  152                          \"<----------------------------------------------------------------------\"\n  153                          \"---------------------------------------------------------------------->\"\n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/rendering_view/record.cljs:\n   29          t0 (tree/t empty-tree)\n   30          new-tree (tree/apply-deltas empty-tree [current-app-model])]\n   31:     (.log js/console (pr-str current-app-model))\n   32:     (.log js/console (pr-str (tree/expand-map current-app-model)))\n   33:     (.log js/console (pr-str t0))\n   34:     (.log js/console (pr-str new-tree))\n   35:     (.log js/console (pr-str (vec (tree/since-t new-tree t0))))\n   36      (vec (tree/since-t new-tree t0))))\n   37  \n\n/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/rendering_view/routes.clj:\n  106                         (get-in config [:aspects :development :out-file]))\n  107             renderer (get-in config [:built-in :render :renderer])\n  108:            log? (or (get-in config [:built-in :render :log?]) false)\n  109             scripts (concat [(host-page/script (html/set-attr :src (str \"/\" js \"/out/goog/base.js\")))\n  110                              (host-page/script (html/set-attr :src (str \"/\" js \"/\" js-file)))]\n  ...\n  113                                      (str \"goog.require('\" renderer \"');\")\n  114                                      (str \"io.pedestal.app_tools.rendering_view.client.main(\"\n  115:                                          renderer \".render_config(),\" log? \");\")]))]\n  116         (assert template \"No template found in config\")\n  117         (-> (render (html/transform (construct-html (html/html-resource template))\n\n/Users/ndrw/pedestal/service/project.clj:\n   13    :description \"Pedestal Service\"\n   14    :dependencies [[org.clojure/clojure \"1.5.0\"]\n   15:                  ;; logging\n   16                   [org.slf4j/slf4j-api \"1.7.2\"]\n   17  \n   ..\n   28    :javac-options [\"-target\" \"1.5\" \"-source\" \"1.5\"]\n   29    :warn-on-reflection true\n   30:   :aliases {\"bench-log\" [\"trampoline\" \"run\" \"-m\" \"io.pedestal.service.log-bench\"]\n   31              \"dumbrepl\" [\"trampoline\" \"run\" \"-m\" \"clojure.main/main\"]}\n   32    :profiles {:default [:dev :provided :user :base]\n   ..\n   42                               [javax.servlet/javax.servlet-api \"3.0.1\"]\n   43                               ;; Logging:\n   44:                              [ch.qos.logback/logback-classic \"1.0.7\"]\n   45:                              [org.clojure/tools.logging \"0.2.4\"]\n   46                               [org.slf4j/jul-to-slf4j \"1.7.2\"]\n   47                               [org.slf4j/jcl-over-slf4j \"1.7.2\"]\n   48:                              [org.slf4j/log4j-over-slf4j \"1.7.2\"]]\n   49                :repositories\n   50                [[\"sonatype-oss\"\n\n/Users/ndrw/pedestal/service/bench/io/pedestal/log_bench.clj:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.log-bench\n   13:   (:require io.pedestal.service.log\n   14:             clojure.tools.logging\n   15              [criterium.core :as criterium])\n   16    (:import (org.slf4j LoggerFactory)))\n   ..\n   18  (defn- slf4j-pr-random []\n   19    (let [n (rand-int 10)\n   20:         logger (LoggerFactory/getLogger \"pedestal.log-bench\")]\n   21      (case n\n   22:       (0 1 2) (when (.isTraceEnabled logger)\n   23:                 (.trace logger (pr-str {:n n :msg \"TRACE is disabled\"\n   24                                          :rand (rand-int 1000)})))\n   25:       (3 4 5) (when (.isDebugEnabled logger)\n   26:                 (.debug logger (pr-str {:n n :msg \"DEBUG message\"\n   27                                          :rand (rand-int 1000)})))\n   28:       (6 7) (when (.isInfoEnabled logger)\n   29:               (.info logger (pr-str {:n n :msg \"INFO message\"\n   30                                       :rand (rand-int 1000)})))\n   31:       8 (when (.isWarnEnabled logger)\n   32:           (.warn logger \n   33                   (pr-str {:n n :msg \"WARN message\"})\n   34                   (ex-info \"error message\"\n   35                            {:rand (rand-int 1000)})))\n   36:       9 (when (.isErrorEnabled logger)\n   37:           (.error logger\n   38                    (pr-str {:n n :msg \"ERROR message\"})\n   39                    (ex-info \"error message\"\n   ..\n   43    (let [n (rand-int 10)]\n   44      (case n\n   45:       (0 1 2) (io.pedestal.service.log/trace :n n :msg \"TRACE is disabled\"\n   46                                       :rand (rand-int 1000))\n   47:       (3 4 5) (io.pedestal.service.log/debug :n n :msg \"DEBUG message\"\n   48                                       :rand (rand-int 1000))\n   49:       (6 7) (io.pedestal.service.log/info :n n :msg \"INFO message\"\n   50                                    :rand (rand-int 1000))\n   51:       8 (io.pedestal.service.log/warn :n n :msg \"WARN message\"\n   52                                :exception (ex-info \"error message\"\n   53                                                    {:rand (rand-int 1000)}))\n   54:       9 (io.pedestal.service.log/error :n n :msg \"ERROR message\"\n   55                                 :exception (ex-info \"error message\"\n   56                                                     {:rand (rand-int 1000)})))))\n   57  \n   58: (defn- tools-logging-random []\n   59    (let [n (rand-int 10)]\n   60      (case n\n   61:       (0 1 2) (clojure.tools.logging/trace {:n n :msg \"TRACE is disabled\"\n   62                                              :rand (rand-int 1000)})\n   63:       (3 4 5) (clojure.tools.logging/debug {:n n :msg \"DEBUG message\"\n   64                                              :rand (rand-int 1000)})\n   65:       (6 7) (clojure.tools.logging/info {:n n :msg \"INFO message\"\n   66                                           :rand (rand-int 1000)})\n   67:       8 (clojure.tools.logging/warn (ex-info \"error message\"\n   68                                               {:rand (rand-int 1000)})\n   69                                      {:n n :msg \"WARN message\"})\n   70:       9 (clojure.tools.logging/error (ex-info \"error message\"\n   71                                                {:rand (rand-int 1000)})\n   72                                       {:n n :msg \"ERROR message\"}))))\n   ..\n   79  \n   80  (defn quick-bench-platform\n   81:   \"Runs a short benchmark of pedestal.log, prints results.\"\n   82    []\n   83    (criterium/with-progress-reporting\n   84      (criterium/quick-bench (platform-random) :verbose)))\n   85  \n   86: (defn quick-bench-tools-logging\n   87:   \"Runs a short benchmark of clojure.tools.logging, prints results.\"\n   88    []\n   89    (criterium/with-progress-reporting\n   90:     (criterium/quick-bench (tools-logging-random) :verbose)))\n   91  \n   92  (defn bench-slf4j-pr\n   ..\n   98  \n   99  (defn bench-platform\n  100:   \"Runs a long (1-2 minutes) benchmark of io.pedestal.service.log, prints\n  101    results.\"\n  102    []\n  ...\n  104      (criterium/bench (platform-random) :verbose)))\n  105  \n  106: (defn bench-tools-logging\n  107:   \"Runs a long (1-2 minutes) benchmark of clojure.tools.logging, prints\n  108    results.\"\n  109    []\n  110    (criterium/with-progress-reporting\n  111:     (criterium/bench (tools-logging-random) :verbose)))\n  112  \n  113  (defn profile-platform\n  114:   \"Runs a long loop (10 x 20000 iterations) of io.pedestal.service.log, for use\n  115    with a profiler.\"\n  116    []\n  ...\n  120  \n  121  (defn -main\n  122:   \"Runs a benchmark of io.pedestal.service.log, clojure.tools.logging, and\n  123    SLF4J. Prints results. Takes 4-6 minutes.\"\n  124    []\n  125    (println \"\n  126  ============================================================\n  127: io.pedestal.service.log\n  128  \")\n  129    (bench-platform)\n  130    (println \"\n  131  ============================================================\n  132: clojure.tools.logging\n  133  \")\n  134:   (bench-tools-logging)\n  135    (println \"\n  136  ============================================================\n\n/Users/ndrw/pedestal/service/src/io/pedestal/service/http.clj:\n   23              [clojure.string :as string]\n   24              [clojure.data.json :as json]\n   25:             [io.pedestal.service.log :as log])\n   26    (:import (java.io OutputStreamWriter)))\n   27  \n   ..\n   52  ;; interceptors\n   53  \n   54: (interceptor/defon-request log-request\n   55    [request]\n   56:   (log/info :msg (format \"%s %s\"\n   57                           (string/upper-case (name (:request-method request)))\n   58                           (:uri request)))\n   ..\n  122    (assoc service-map ::interceptors\n  123           (cond-> []\n  124:                  true (conj log-request)\n  125                   (not (nil? allowed-origins)) (conj (cors/allow-origin allowed-origins))\n  126                   true (conj not-found)\n  ...\n  181  (defn create-server\n  182    [options]\n  183:   (log/init-java-util-log)\n  184    (-> options\n  185        create-servlet\n\n/Users/ndrw/pedestal/service/src/io/pedestal/service/log.clj:\n   10  ; You must not remove this notice, or any other, from this software.\n   11  \n   12: (ns io.pedestal.service.log\n   13:   \"Logging via slf4j. Each logging level is a macro: trace, debug,\n   14    info, warn, and error. Each namespace gets its own Logger. Arguments\n   15    are key-value pairs, which will be printed as with 'pr'. The special\n   16    key :exception should have a java.lang.Throwable as its value, and\n   17:   will be passed separately to the underlying logging API.\"\n   18    (:require clojure.string)\n   19    (:import (org.slf4j LoggerFactory)))\n   20  \n   21: (defn- log-expr [form level keyvals]\n   22    ;; Pull out :exception, otherwise preserve order\n   23    (let [exception' (:exception (apply array-map keyvals))\n   24          keyvals' (mapcat identity (remove #(= :exception (first %))\n   25                                            (partition 2 keyvals)))\n   26:         logger' (gensym \"logger\")  ; for nested syntax-quote\n   27          string' (gensym \"string\")\n   28          enabled-method' (symbol (str \".is\"\n   29                                       (clojure.string/capitalize (name level))\n   30                                       \"Enabled\"))\n   31:         log-method' (symbol (str \".\" (name level)))]\n   32:     `(let [~logger' (LoggerFactory/getLogger ~(name (ns-name *ns*)))]\n   33:        (when (~enabled-method' ~logger')\n   34           (let [~string' (binding [*print-length* 80]\n   35                            (pr-str (array-map :line ~(:line (meta form)) ~@keyvals')))]\n   36             ~(if exception'\n   37:               `(~log-method' ~logger'\n   38                               ~(with-meta string'\n   39                                  {:tag 'java.lang.String})\n   40                               ~(with-meta exception'\n   41                                  {:tag 'java.lang.Throwable}))\n   42:               `(~log-method' ~logger' ~string')))))))\n   43  \n   44: (defmacro trace [& keyvals] (log-expr &form :trace keyvals))\n   45  \n   46: (defmacro debug [& keyvals] (log-expr &form :debug keyvals))\n   47  \n   48: (defmacro info [& keyvals] (log-expr &form :info keyvals))\n   49  \n   50: (defmacro warn [& keyvals] (log-expr &form :warn keyvals))\n   51  \n   52: (defmacro error [& keyvals] (log-expr &form :error keyvals))\n   53  \n   54  (defmacro spy\n   ..\n   57    (let [value' (gensym \"value\")]\n   58      `(let [~value' ~expr]\n   59:        ~(log-expr &form 'debug (vector :spy (list 'quote expr)\n   60                                         :value value'))\n   61         ~value')))\n   62  \n   63: (defn init-java-util-log\n   64    \"Invoke this once when starting your application to redirect all\n   65:   java.util.logging log messages to SLF4J. The current project's\n   66    dependencies must include org.slf4j/jul-to-slf4j.\"\n   67    []\n\n/Users/ndrw/pedestal/service/src/io/pedestal/service/test.clj:\n   13    io.pedestal.service.test\n   14    (:require [io.pedestal.service.http.servlet :as servlets]\n   15:             [io.pedestal.service.log :as log]\n   16              [clojure.string :as str]\n   17              clojure.java.io)\n   ..\n   43        (hasMoreElements [this] (not (nil? (first @data))))\n   44        (nextElement [this]\n   45:         (log/debug :in :enumerator/nextElement\n   46                     :data @data\n   47                     :hasMoreElements (not (nil? (first @data)))\n   ..\n  181    [interceptor-service-fn verb url & options]\n  182    (let [servlet-resp (apply servlet-response-for interceptor-service-fn verb url options)]\n  183:     (log/debug :in :response-for\n  184                 :servlet-resp servlet-resp)\n  185      (update-in servlet-resp [:headers] #(merge (:set-header %)\n\n/Users/ndrw/pedestal/service/src/io/pedestal/service/http/body_params.clj:\n   15              [clojure.string :as str]\n   16              [io.pedestal.service.interceptor :as interceptor :refer [definterceptorfn]]\n   17:             [io.pedestal.service.log :as log]\n   18              [ring.middleware.params :as params]))\n   19  \n\n/Users/ndrw/pedestal/service/src/io/pedestal/service/http/cors.clj:\n   13    (:require [io.pedestal.service.interceptor :refer :all]\n   14              [io.pedestal.service.http.impl.servlet-interceptor :as servlet-interceptor]\n   15:             [io.pedestal.service.log :as log]\n   16              [ring.util.response :as ring-response]))\n   17  \n   ..\n   26                (if-let [origin (get-in context [:request :headers \"origin\"])]\n   27                  (let [allowed (allowed? origin)]\n   28:                   (log/debug :msg \"cors processing\"\n   29                               :origin origin\n   30                               :allowed allowed)\n   ..\n   41    [context]\n   42    (let [origin (get-in context [:request :headers \"origin\"])]\n   43:     (log/debug :msg \"cors dev processing\"\n   44                 :origin origin\n   45                 :context context)\n\n/Users/ndrw/pedestal/service/src/io/pedestal/service/http/sse.clj:\n   13    (:require [ring.util.response :as ring-response]\n   14              [io.pedestal.service.http.servlet :refer :all]\n   15:             [io.pedestal.service.log :as log]\n   16              [io.pedestal.service.interceptor :as interceptor :refer [definterceptorfn]]\n   17              [io.pedestal.service.impl.interceptor :as interceptor-impl]\n   ..\n   43  \n   44  (defn send-event [stream-context name data]\n   45:   (log/trace :msg \"writing event to stream\"\n   46               :name name\n   47               :data data)\n   ..\n   56        (servlet-interceptor/flush-response stream-context))\n   57      (catch Throwable t\n   58:       (log/error :msg \"exception sending event\"\n   59                   :throwable t\n   60                   :stacktrace (with-out-str (clojure.stacktrace/print-stack-trace t)))\n   ..\n   64    (try\n   65      (locking (servlet-interceptor/lockable stream-context)\n   66:       (log/trace :msg \"writing heartbeat to stream\")\n   67        (servlet-interceptor/write-response-body stream-context CRLF)\n   68        (servlet-interceptor/flush-response stream-context))\n   69      (catch Throwable t\n   70:       (log/error :msg \"exception sending heartbeat\"\n   71                   :throwable t\n   72                   :stacktrace (with-out-str (clojure.stacktrace/print-stack-trace t)))\n   ..\n   95                       (ring-response/header \"Cache-control\" \"no-cache\")\n   96                       (update-in [:headers] merge (:cors-headers stream-context)))]\n   97:     (log/debug :in :start-stream :response response)\n   98:     (log/trace :msg \"starting sse handler\")\n   99      (servlet-interceptor/write-response stream-context response)\n  100      (servlet-interceptor/flush-response stream-context)\n  101:     (log/trace :msg \"response headers sent\")\n  102  \n  103      (let [hb-future (schedule-heartbeart stream-context heartbeat-delay)]\n  104        (assoc stream-context ::end-event-stream\n  105               (fn []\n  106:                (log/trace :msg \"resuming after streaming\"\n  107                            :context stream-context)\n  108                 (.cancel hb-future true)\n  ...\n  115    (fn [{:keys [request] :as context}]\n  116      (interceptor-impl/with-pause [post-pause-context context]\n  117:       (log/trace :msg \"switching to sse\")\n  118        (future\n  119          (try\n  120            (stream-ready-fn (start-stream post-pause-context heartbeat-delay))\n  121            (catch Throwable t\n  122:             (log/error :msg \"exception starting stream\"\n  123                         :throwable t\n  124                         :stacktrace (with-out-str (clojure.stacktrace/print-stack-trace t)))\n\n/Users/ndrw/pedestal/service/src/io/pedestal/service/http/impl/servlet_interceptor.clj:\n   15              [clojure.pprint :as pprint]\n   16              [clojure.stacktrace :as stacktrace]\n   17:             [io.pedestal.service.log :as log]\n   18              [io.pedestal.service.interceptor :as interceptor :refer [definterceptor]]\n   19              [io.pedestal.service.http.route :as route]\n   ..\n  206  \n  207  (defn- send-error [servlet-response message]\n  208:   (log/info :msg \"sending error\"\n  209              :message message)\n  210    (send-response servlet-response {:status 500 :body message}))\n  ...\n  214      :as context}]\n  215    (let [response-sent (response-sent? context)]\n  216:     (log/debug :in :leave-ring-response\n  217                 :response response\n  218                 :response-sent response-sent)\n  ...\n  235    \"Makes sure we send an error response on an exception, even in the\n  236    async case. This is just to make sure exceptions get returned\n  237:   somehow; application code should probably catch and log exceptions\n  238    in its own interceptors.\"\n  239    [{:keys [servlet-response] :as context} exception]\n  240:   (log/error :msg \"error-stylobate triggered\"\n  241               :exception exception\n  242               :context context)\n  ...\n  246    \"Makes sure we send an error response on an exception, even in the\n  247    async case. This is just to make sure exceptions get returned\n  248:   somehow; application code should probably catch and log exceptions\n  249    in its own interceptors.\"\n  250    [{:keys [servlet-response] :as context} exception]\n  251:   (log/error :msg \"error-ring-response triggered\"\n  252               :exception exception\n  253               :context context)\n  ...\n  279  \n  280    If a later interceptor in this context throws an exception which is\n  281:   not caught, this interceptor will log the error but not communicate\n  282    any details to the client.\n  283  \n  ...\n  350                            :servlet-config (.getServletConfig servlet)\n  351                            :servlet servlet})]\n  352:       (log/info :in :interceptor-service-fn\n  353                  :context context)\n  354        (try\n  355          (let [final-context (interceptor-impl/execute\n  356                               (apply interceptor-impl/enqueue context interceptors))]\n  357:           (log/debug :msg \"Leaving servlet\"\n  358                      :final-context final-context))\n  359          (catch Throwable t\n  360:           (log/error :msg \"Servlet code threw an exception\"\n  361                       :throwable t\n  362                       :cause-trace (with-out-str\n\n/Users/ndrw/pedestal/service/src/io/pedestal/service/impl/interceptor.clj:\n   15    handling and support for asynchronous execution.\"\n   16    (:refer-clojure :exclude (name))\n   17:   (:require [io.pedestal.service.log :as log])\n   18    (:import java.util.concurrent.atomic.AtomicLong))\n   19  \n   ..\n   27    (let [execution-id (::execution-id context)]\n   28      (if-let [f (get interceptor stage)]\n   29:       (try (log/debug :interceptor (name interceptor)\n   30                        :stage stage\n   31                        :execution-id execution-id\n   ..\n   33             (f context)\n   34             (catch Throwable t\n   35:              (log/debug :throw t :execution-id execution-id)\n   36               (assoc context ::error t)))\n   37:       (do (log/trace :interceptor (name interceptor)\n   38                       :skipped? true\n   39                       :stage stage\n   ..\n   48      (if-let [error-fn (get interceptor :error)]\n   49        (let [ex (::error context)]\n   50:         (log/debug :interceptor (name interceptor)\n   51                     :stage :error\n   52                     :execution-id execution-id)\n   ..\n   54               (catch Throwable t\n   55                 (if (identical? t ex)\n   56:                  (do (log/debug :rethrow t :execution-id execution-id)\n   57                       context)\n   58:                  (do (log/debug :throw t :suppressed ex :execution-id execution-id)\n   59                       (-> context\n   60                           (assoc ::error t)\n   61                           (update-in [::suppressed] conj ex)))))))\n   62:       (do (log/trace :interceptor (name interceptor)\n   63                       :skipped? true\n   64                       :stage :error\n   ..\n   72    (if (some #(% context) (::terminators context))\n   73      (let [execution-id (::execution-id context)]\n   74:       (log/debug :in 'check-terminators\n   75                   :terminate? true\n   76                   :execution-id execution-id)\n   ..\n   83    updated context.\"\n   84    [context]\n   85:   (log/debug :in 'enter-all :execution-id (::execution-id context))\n   86    (loop [context context]\n   87      (let [queue (::queue context)\n   88            stack (::stack context)\n   89            execution-id (::execution-id context)]\n   90:       (log/trace :context context)\n   91        (if (empty? queue)\n   92          context\n   ..\n  120    the ::stack of context. Returns updated context.\"\n  121    [context]\n  122:   (log/debug :in 'leave-all :execution-id (::execution-id context))\n  123    (loop [context context]\n  124      (let [stack (::stack context)\n  125            execution-id (::execution-id context)]\n  126:       (log/trace :context context)\n  127        (if (empty? stack)\n  128          context\n  ...\n  170                            (assoc stack-key (pop stack))\n  171                            ((or f identity) ))]\n  172:           (log/debug :interceptor (name interceptor)\n  173                       :stage stage\n  174                       :skipped? skipped\n  ...\n  196    the queue if necessary. Returns updated context.\"\n  197    [context & interceptors]\n  198:   (log/trace :enqueue (map name interceptors) :context context)\n  199    (update-in context [::queue]\n  200               (fnil into clojure.lang.PersistentQueue/EMPTY)\n  ...\n  212    functions and begins executing the :leave functions.\"\n  213    [context]\n  214:   (log/trace :in 'terminate :context context)\n  215    (dissoc context ::queue))\n  216  \n  ...\n  218    \"Adds pred as a terminating condition of the context. pred is a\n  219    function that takes a context as its argument. It will be invoked\n  220:   after every Interceptor's :enter function. If pred returns logical\n  221    true, execution will stop at that Interceptor.\"\n  222    [context pred]\n  ...\n  239      context\n  240      (let [execution-id (.incrementAndGet execution-id)]\n  241:       (log/debug :in 'begin :execution-id execution-id)\n  242:       (log/trace :context context)\n  243        (assoc context ::execution-id execution-id))))\n  244  \n  245  (defn- end [context]\n  246:   (log/debug :in 'end :execution-id execution-id)\n  247:   (log/trace :context context)\n  248    context)\n  249  \n  ...\n  304    of any Interceptors on the stack. Returns an updated context.\"\n  305    [context]\n  306:   (log/debug :in 'pause :execution-id (::execution-id context))\n  307:   (log/trace :context context)\n  308    (-> context\n  309        (assoc ::pause-stack (::stack context))\n  ...\n  316    reverse order. Returns an updated context.\"\n  317    [context]\n  318:   (log/debug :in 'resume :execution-id (::execution-id context))\n  319:   (log/trace :context context)\n  320    (-> context\n  321        (assoc ::resume-stack (reverse (::stack context)))\n\n/Users/ndrw/pedestal/service/test/io/pedestal/service/http/route_test.clj:\n   41    [request]\n   42    \"update-user\")\n   43: (defhandler logout\n   44    [request]\n   45:   \"logout\")\n   46  (defhandler delete-user\n   47    [request]\n   ..\n  111                 {:path \"/user/:user-id/delete\"\n  112                  :verbs {:delete delete-user}}]}\n  113:    {:children [{:path \"/logout\"\n  114:                 :verbs {:any logout}}\n  115                 {:path \"/search\"\n  116                  :verbs {:get search-form}\n  ...\n  163  \n  164      [\"/user/:user-id/delete\" {:delete delete-user}]]\n  165:    [[\"/logout\" {:any logout}]\n  166      [\"/search\" {:get search-form}\n  167       [^:constraints {:id #\"[0-9]+\"} {:get search-id}]\n  ...\n  200        [\"/demo/site-two/*site-path\" {:get [:site-two-demo (handler :site-two (site-demo \"two\"))]}]\n  201        [\"/user/:user-id/delete\" {:delete delete-user}]]\n  202:      [[\"/logout\" {:any logout}]\n  203        [\"/search\" {:get search-form}\n  204         [^:constraints {:id #\"[0-9]+\"} {:get search-id}]\n  ...\n  236          [\"/demo/site-two/*site-path\" {:get [:site-two-demo (site-demo ~two)]}]\n  237          [\"/user/:user-id/delete\" {:delete delete-user}]]\n  238:        [[\"/logout\" {:any logout}]\n  239          [\"/search\" {:get search-form}\n  240           [^:constraints {:id #\"[0-9]+\"} {:get search-id}]\n  ...\n  402         syntax-quote-data-routes))\n  403  \n  404: (deftest match-logout\n  405:   (are [routes] (= {:route-name ::logout :path-params {}}\n  406:                    (test-match routes :post \"/logout\"))\n  407         verbose-routes\n  408         terse-routes\n  ...\n  523         syntax-quote-data-routes))\n  524  \n  525: (deftest logout-link\n  526:   (are [routes] (= \"/logout\" ((make-linker routes) ::logout :app-name :public))\n  527         verbose-routes\n  528         terse-routes\n\n/Users/ndrw/pedestal/service/test/io/pedestal/service/http/sse_test.clj:\n   12  (ns io.pedestal.service.http.sse-test\n   13    (:require [io.pedestal.service.impl.interceptor :as interceptor]\n   14:             [io.pedestal.service.log :as log]\n   15              [io.pedestal.service.http.sse :refer :all]\n   16              [io.pedestal.service.http.cors :as cors])\n   ..\n   27          semaphore (promise)\n   28          sse-rig (fn [sse-context]\n   29:                   (log/info :msg \"in sse rig\")\n   30                    (send-event sse-context \"test\" \"passes\")\n   31                    (end-event-stream sse-context)\n   32                    (deliver semaphore (.isCommitted (:servlet-response sse-context))))\n   33          interceptor-context (interceptor/enqueue fake-context (start-event-stream sse-rig))]\n   34:     (log/info :context interceptor-context\n   35                :queue (seq (:io.pedestal.service.impl.interceptor/queue interceptor-context)))\n   36:     (log/info :execution-call (interceptor/execute interceptor-context))\n   37      (is (= @semaphore true))\n   38      (is (= 200 @status)\n   ..\n   55          semaphore (promise)\n   56          sse-rig (fn [sse-context]\n   57:                   (log/info :msg \"in sse rig\")\n   58                    (send-event sse-context \"test\" \"passes\")\n   59                    (end-event-stream sse-context)\n   ..\n   62                                                   (cors/allow-origin [\"http://foo.com:8080\"])\n   63                                                   (start-event-stream sse-rig))]\n   64:     (log/info :context interceptor-context\n   65                :queue (seq (:io.pedestal.service.impl.interceptor/queue interceptor-context)))\n   66:     (log/info :execution-call (interceptor/execute interceptor-context))\n   67      (is (= @semaphore true))\n   68      (is (= 200 @status)\n\n/Users/ndrw/pedestal/service-template/src/leiningen/new/pedestal_service.clj:\n   27               [\"src/{{sanitized}}/service.clj\" (render \"service.clj\" data)]\n   28               [\"test/{{sanitized}}/service_test.clj\" (render \"service_test.clj\" data)]\n   29:              [\"config/logback.xml\" (render \"logback.xml\" data)]\n   30               [\"dev/user.clj\" (render \"user.clj\" data)]\n   31               [\"dev/dev.clj\" (render \"dev.clj\" data)])))\n\n/Users/ndrw/pedestal/service-template/src/leiningen/new/pedestal_service/project.clj:\n   13  \n   14                   ;; Logging\n   15:                  [ch.qos.logback/logback-classic \"1.0.7\"]\n   16                   [org.slf4j/jul-to-slf4j \"1.7.2\"]\n   17                   [org.slf4j/jcl-over-slf4j \"1.7.2\"]\n   18:                  [org.slf4j/log4j-over-slf4j \"1.7.2\"]]\n   19    :profiles {:dev {:source-paths [\"dev\"]}}\n   20    :min-lein-version \"2.0.0\"\n\n/Users/ndrw/pedestal/tomcat/project.clj:\n   13    :description \"Embedded Tomcat adapter for Pedestal HTTP Service\"\n   14    :dependencies [[org.clojure/clojure \"1.5.0\"]\n   15:                  [org.apache.tomcat.embed/tomcat-embed-logging-juli \"7.0.30\"]\n   16                   [org.apache.tomcat.embed/tomcat-embed-jasper \"7.0.30\"]\n   17                   [org.apache.tomcat.embed/tomcat-embed-core \"7.0.30\"]\n\n569 matches across 90 files\n",
			"settings":
			{
				"buffer_size": 131977,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/simulated/start.cljs",
			"settings":
			{
				"buffer_size": 1838,
				"line_ending": "Unix"
			}
		},
		{
			"file": "booking-app/app/src/booking_app/simulated/start.cljs",
			"settings":
			{
				"buffer_size": 1166,
				"line_ending": "Unix"
			}
		},
		{
			"file": "booking-app/app/templates/application.html",
			"settings":
			{
				"buffer_size": 1242,
				"line_ending": "Unix"
			}
		},
		{
			"file": "booking-app/app/templates/booking-app.html",
			"settings":
			{
				"buffer_size": 1159,
				"line_ending": "Unix"
			}
		},
		{
			"file": "booking-app/config/config.clj",
			"settings":
			{
				"buffer_size": 5068,
				"line_ending": "Unix"
			}
		},
		{
			"file": "booking-app/test/booking_app/test/behavior.clj",
			"settings":
			{
				"buffer_size": 1397,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/LaTeXTools/LaTeX.sublime-build",
	"command_palette":
	{
		"height": 187.0,
		"selected_items":
		[
			[
				"Browse",
				"Preferences: Browse Packages"
			],
			[
				"Pre",
				"Preferences: Settings - Default"
			],
			[
				"Brow",
				"Preferences: Browse Packages"
			],
			[
				"Pa",
				"Package Control: Install Package"
			],
			[
				"Pakc",
				"Preferences: Package Control Settings – User"
			],
			[
				"Packa",
				"Preferences: Browse Packages"
			],
			[
				"print",
				"Print to HTML: print as HTML via browser"
			],
			[
				"Insta",
				"Package Control: Install Package"
			],
			[
				"Pac",
				"Preferences: Browse Packages"
			],
			[
				"Mar",
				"Markdown Preview: preview in Browser"
			],
			[
				"Mark",
				"Markdown Preview: open Markdown Cheat sheet"
			],
			[
				"Pacak",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 242.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/rendering.cljs",
		"/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/server.clj",
		"/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/service.clj",
		"/Users/ndrw/pedestal/service/src/io/pedestal/service/http.clj",
		"/Users/ndrw/kmc-booking/booking-app/dev/dev.clj",
		"/Users/ndrw/kmc-booking/booking-app/app/assets/stylesheets/booking-app.css",
		"/Users/ndrw/kmc-booking/booking-app/tools/public/design.html",
		"/Users/ndrw/kmc-booking/booking-app/app/templates/application.html",
		"/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/simulated/start.cljs",
		"/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/simulated/start.cljs",
		"/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/start.cljs",
		"/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/behavior.clj",
		"/Users/ndrw/kmc-booking/booking-app/dev/user.clj",
		"/Users/ndrw/pedestal-samples/chat/chat-client/config/config.clj",
		"/Users/ndrw/pedestal-samples/chat/chat-client/dev/dev.clj",
		"/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/app.cljs",
		"/Users/ndrw/pedestal/app-tools/src/io/pedestal/app_tools/tooling.cljs",
		"/Users/ndrw/kmc-booking/booking-app/.lein-repl-history",
		"/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/services.cljs",
		"/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/simulated/services.cljs",
		"/Users/ndrw/kmc-booking/booking-app/tools/public/index.html",
		"/Users/ndrw/kmc-booking/booking-app/app/src/booking_app/services.cljs",
		"/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/rendering.cljs",
		"/Users/ndrw/kmc-booking/booking-app/config/config.clj",
		"/Users/ndrw/kmc-booking/booking-app/app/templates/booking-app.html",
		"/Users/ndrw/kmc-booking/booking/src/booking/service.clj",
		"/Users/ndrw/kmc-booking/booking/project.clj",
		"/Users/ndrw/kmc-booking/pedestal-service/test/pedestal_service/core_test.clj",
		"/Users/ndrw/kmc-booking/pedestal-service/README.md",
		"/Users/ndrw/!/myfolder/concept.md",
		"/Users/ndrw/monte/project.clj",
		"/Users/ndrw/monte/src-cljs/monte/ui-test.cljs",
		"/Users/ndrw/monte/src/monte/backend/server.clj",
		"/Users/ndrw/monte/src/monte/views/common.clj",
		"/Users/ndrw/monte/src/monte/views/index.clj",
		"/Users/ndrw/monte/src-cljs/monte/main.cljs",
		"/Users/ndrw/monte/src-cljs/monte/ui.cljs",
		"/Users/ndrw/monte/src/monte/views/ui_tests.clj",
		"/Users/ndrw/monte/src/monte/views/settings.clj",
		"/Users/ndrw/pedestal-samples/server-with-links/project.clj",
		"/Users/ndrw/monte/src-cljs/monte/new_project_ui.cljs",
		"/Users/ndrw/monte/src/monte/miners/core.clj",
		"/Users/ndrw/monte/src-cljs/monte/settings_ui.cljs",
		"/Users/ndrw/monte/src/monte/views/project.clj",
		"/Users/ndrw/monte/src/monte/runtime.clj",
		"/Users/ndrw/monte/src-cljs/monte/settings.cljs",
		"/Users/ndrw/monte/src/monte/views/ui-tests.clj",
		"/Users/ndrw/Library/Application Support/Sublime Text 2/Packages/User/JSON.sublime-settings",
		"/Users/ndrw/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/ndrw/Library/Application Support/Sublime Text 2/Packages/User/Plain text.sublime-settings",
		"/Users/ndrw/monte/test/monte/performance_test.clj",
		"/Users/ndrw/monte/monte.TODO",
		"/Users/ndrw/monte/test/monte/miners_test.clj",
		"/Users/ndrw/monte/prototypes/test-projects.txt",
		"/Users/ndrw/Desktop/untitled.html",
		"/Users/ndrw/monte/test/monte/datalog_test.clj",
		"/Users/ndrw/monte/doc/conventions.md",
		"/Users/ndrw/Desktop/dev/site/blog/posts/data_querying.md",
		"/Users/ndrw/monte/test/monte/core_test.clj",
		"/Users/ndrw/monte/src/monte/dummies.clj",
		"/Users/ndrw/monte/src/monte/core.clj",
		"/Users/ndrw/monte/prototypes/js/monte.js",
		"/Users/ndrw/monte/test/monte/macro_test.clj",
		"/Users/ndrw/monte/test/monte/datalog-test.clj",
		"/Users/ndrw/Desktop/захист",
		"/Users/ndrw/monte/resources/public/css/monte.css",
		"/Users/ndrw/monte/prototypes/style.css",
		"/Users/ndrw/monte/src/monte/backend/api.clj",
		"/Users/ndrw/monte/src/monte/launcher.clj",
		"/Users/ndrw/monte/prototypes/index.html",
		"/Users/ndrw/monte/test/monte/JIRAMiner_test.clj",
		"/Users/ndrw/monte/prototypes/js/dracula_graph.js",
		"/Users/ndrw/monte/monte.sublime-project",
		"/Users/ndrw/monte/prototypes/visualize.html",
		"/Users/ndrw/monte/src-cljs/monte/deps.cljs",
		"/Users/ndrw/monte/resources/public/js/js.js",
		"/Users/ndrw/monte/src-cljs/monte/test.cljs",
		"/Users/ndrw/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/ndrw/monte/src/monte/cfg.clj",
		"/Users/ndrw/monte/README.md",
		"/Users/ndrw/monte/src/monte/miners/impl.clj",
		"/Users/ndrw/monte/src/monte/miners/dummy.clj",
		"/Users/ndrw/monte/crap.txt",
		"/Users/ndrw/monte/resources/public/js/cljs.js",
		"/Users/ndrw/monte/resources/public/extern/jquery-1.7.2.min.js",
		"/Users/ndrw/monte/test/monte/extern-miners.clj",
		"/Users/ndrw/Desktop/dev/clojure/clojure-1.4.0/src/clj/clojure/core.clj",
		"/Users/ndrw/Desktop/dev/clojure/clojure-1.4.0/src/clj/clojure/core_deftype.clj",
		"/Users/ndrw/monte/src/monte/miners/extern-miners.clj",
		"/Users/ndrw/Desktop/dev/clojure/codeq/project.clj",
		"/Users/ndrw/monte/prototypes/data.html",
		"/Users/ndrw/!/!.TODO",
		"/Users/ndrw/monte/src/monte/miners/miners.clj",
		"/Users/ndrw/monte/src-cljs/monte/ui.lcjs",
		"/Users/ndrw/Desktop/dev/excel_easy_sum/sample1.groovy",
		"/Users/ndrw/Desktop/dev/excel_easy_sum/sample.java",
		"/Users/ndrw/Desktop/dev/excel_easy_sum/!.TODO",
		"/Users/ndrw/Dropbox/todo.txt",
		"/Users/ndrw/monte/prototypes/view1.html",
		"/Users/ndrw/monte/prototypes/refine.html",
		"/Users/ndrw/!/read.me",
		"/Users/ndrw/Dropbox/diary_encoded.txt",
		"/Users/ndrw/Desktop/yarrr.gif",
		"/Users/ndrw/Desktop/0.gif",
		"/Users/ndrw/SparkleShare/ShivaTheDestructor/Sabatuchi/lyrics.txt",
		"/Users/ndrw/!/inbox/twitter.log",
		"/Users/ndrw/monte/prototypes/basic.html",
		"/Users/ndrw/SparkleShare/DROPBOX/Diploma/ndrw/table_of_contents",
		"/Users/ndrw/Downloads/jvmd.sql",
		"/Users/ndrw/Desktop/dev/clojure/launcher/jayq/macros.clj",
		"/Users/ndrw/tetris-servers/tetris-servers/clojure/src/tetris/core.clj",
		"/Users/ndrw/tdd-elevator-training/tetris/tetris-web/pom.xml",
		"/Users/ndrw/tdd-elevator-training/tetris/tetris-web/startServer.sh",
		"/Users/ndrw/tdd-elevator-training/tetris/tetris-core/pom.xml",
		"/Users/ndrw/tdd-elevator-training/tetris/start-server.sh",
		"/Users/ndrw/tdd-elevator-training/tetris/start-server.log",
		"/Users/ndrw/tdd-elevator-training/clj-tetris/src/tetris/core.clj",
		"/Users/ndrw/Desktop/dev/clojure/tonsky/bloknote/src-clj/bloknote/server.clj",
		"/Users/ndrw/tdd-elevator-training/clj-tetris/src/tetris/server.clj",
		"/Users/ndrw/tdd-elevator-training/clj-tetris/test/tetris/core_test.clj",
		"/Users/ndrw/tdd-elevator-training/clj-tetris/project.clj",
		"/Users/ndrw/Desktop/dev/clojure/tonsky/bloknote/project.clj",
		"/Users/ndrw/tdd-elevator-training/clj-tetris/src/app/core.clj",
		"/Users/ndrw/Desktop/dev/site/htdocs/blog/style.css",
		"/Users/ndrw/monte/resources/public/extern/raphael-min.js",
		"/Users/ndrw/Desktop/dev/clojure/tonsky/bloknote/src-cljs/bloknote/sheet.cljs",
		"/Users/ndrw/Desktop/dev/clojure/tonsky/bloknote/src-clj/bloknote/data.clj",
		"/Users/ndrw/Desktop/dev/clojure/tonsky/bloknote/src-cljs/bloknote/cursor.cljs"
	],
	"find":
	{
		"height": 50.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"*.clj*",
			"*.clj?",
			"*.clj",
			"*.cljs",
			"*.js",
			"*.clj",
			"",
			"*.clj",
			"",
			"*.clj",
			"",
			"*.clj",
			"",
			"*.cljs",
			"*.clj",
			"*.cljs",
			"*.cljs;*.clj",
			"*.clj",
			"*.sty",
			"",
			"*.tex;*.sty",
			"/Applications/MAMP/htdocs/php/templates"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"log",
			"app/build",
			"build",
			"chat-client.behavior",
			"app-development-server",
			"ns dev",
			"dev",
			"ns dev",
			"dev",
			"defn dev",
			":message",
			"view-example-transform",
			"services-fn",
			"services_fn",
			"data-renderer-config",
			"app.web",
			"img/",
			"img",
			"services",
			"png",
			"crate",
			"view-id",
			"on-ready",
			" ",
			"click",
			"cliсл",
			":a",
			"vis-data-connections",
			"vis-data-entities",
			"list-con",
			"entities",
			"dom-entities",
			"dom-legend",
			"WORK-DIR}/",
			"log",
			"process-connections",
			"(remove empty? (map (fn[x] (remove nil? x)) (filter #(not (= (list nil nil) %)) board)) )",
			"parse-en",
			"dom-leg",
			"legen",
			"FFF",
			"select-project-view",
			"list",
			"miners-for-project",
			"get-miner-schemas",
			"process-entity-new",
			"process-entity-new\n",
			"process-entity-new",
			"dos",
			"create",
			"filter",
			"dummy-en",
			"split",
			"doall",
			"tick",
			"last-updated",
			"project-view",
			"changes",
			"workspace-updated",
			"proj",
			"legend-width",
			"2",
			"250",
			"status",
			"border",
			".empty",
			"Graph.Renderer.Raphael",
			"connec",
			"redraw-vis",
			"status",
			"margin-top",
			"padding-top",
			"artic",
			"button",
			"list-types-implementing",
			"DummyMiner",
			"miner-ns",
			"list-types-implementing",
			"println",
			"empty",
			"new ",
			"view",
			"_entity-key",
			"_miner-key",
			"goog.provide(",
			"goog.require",
			"shoreleave.shoreleave.remotes.http_rpc\n",
			"monte.launcher",
			"fm",
			"rcp",
			"shoreleave.remotes.http_rpc",
			"project-",
			"key",
			" d",
			"ftr",
			"miner-results",
			"miner",
			"indent",
			")\n",
			" (\\{\\:)(.*)(\\})",
			"{:",
			"map",
			"doseq",
			"noir",
			"fetch",
			"fm",
			"fetch",
			"noir",
			"defpage",
			"hiccup",
			"monte.launcher",
			"json",
			"json-str",
			"json",
			".dummy",
			"dummy",
			".dummy",
			"(defminer",
			"cljs.js",
			"intro_view",
			"IntroView",
			"introview",
			"settings-loc",
			"settings",
			"(comment",
			"list-types-implementing",
			"monte.miners.core",
			"@P1\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			" [:\\2]",
			" :[\\2]",
			" [\\2]",
			"&&",
			"d",
			"was_used",
			"data",
			"insert into tmp_emails(emai) values ('$0');",
			"'",
			",\\n",
			"\"$0\"",
			"\"$1\"",
			"\".*\"",
			"",
			"fs",
			"'",
			"h2>",
			"",
			"'",
			"",
			"<li>\\1</li>",
			"\\1",
			"\"http://pidruchniki.ws/imag/",
			"http://pidruchniki.ws/imag/",
			"",
			"3",
			"2",
			"<li>",
			"</li>",
			"</ul>",
			"<ul>",
			"",
			"seats",
			"append",
			",",
			"1260",
			"300",
			"1168",
			"1024",
			"data",
			"1em",
			"TODO:"
		],
		"reverse": true,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"settings":
					{
						"buffer_size": 704,
						"regions":
						{
						},
						"selection":
						[
							[
								704,
								704
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 1422,
						"regions":
						{
						},
						"selection":
						[
							[
								1422,
								1422
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "booking-app/app/src/booking_app/behavior.clj",
					"settings":
					{
						"buffer_size": 3121,
						"regions":
						{
						},
						"selection":
						[
							[
								350,
								350
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/behavior.clj",
					"settings":
					{
						"buffer_size": 6223,
						"regions":
						{
						},
						"selection":
						[
							[
								433,
								433
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 78.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"settings":
					{
						"buffer_size": 131977,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										249,
										269
									],
									[
										568,
										588
									],
									[
										943,
										963
									],
									[
										1371,
										1376
									],
									[
										1571,
										1576
									],
									[
										1894,
										1899
									],
									[
										1944,
										1949
									],
									[
										1962,
										1967
									],
									[
										2329,
										2334
									],
									[
										2615,
										2620
									],
									[
										2982,
										2987
									],
									[
										2992,
										2997
									],
									[
										3193,
										3198
									],
									[
										3243,
										3248
									],
									[
										3506,
										3511
									],
									[
										3520,
										3525
									],
									[
										3603,
										3608
									],
									[
										3665,
										3670
									],
									[
										3925,
										3930
									],
									[
										4079,
										4084
									],
									[
										4240,
										4245
									],
									[
										4500,
										4505
									],
									[
										4792,
										4797
									],
									[
										5112,
										5117
									],
									[
										5372,
										5377
									],
									[
										5520,
										5525
									],
									[
										5690,
										5695
									],
									[
										5799,
										5804
									],
									[
										5986,
										5991
									],
									[
										6172,
										6177
									],
									[
										6359,
										6364
									],
									[
										6684,
										6689
									],
									[
										6951,
										6956
									],
									[
										7246,
										7251
									],
									[
										7470,
										7475
									],
									[
										7745,
										7750
									],
									[
										8119,
										8124
									],
									[
										8396,
										8401
									],
									[
										8820,
										8825
									],
									[
										8830,
										8835
									],
									[
										9031,
										9036
									],
									[
										9081,
										9086
									],
									[
										9344,
										9349
									],
									[
										9358,
										9363
									],
									[
										9441,
										9446
									],
									[
										9503,
										9508
									],
									[
										9763,
										9768
									],
									[
										9917,
										9922
									],
									[
										10078,
										10083
									],
									[
										10338,
										10343
									],
									[
										10630,
										10635
									],
									[
										11002,
										11007
									],
									[
										11269,
										11274
									],
									[
										11629,
										11634
									],
									[
										11896,
										11901
									],
									[
										12210,
										12215
									],
									[
										12418,
										12423
									],
									[
										12750,
										12755
									],
									[
										12786,
										12791
									],
									[
										13067,
										13072
									],
									[
										13192,
										13197
									],
									[
										13375,
										13380
									],
									[
										13571,
										13576
									],
									[
										13757,
										13762
									],
									[
										13940,
										13945
									],
									[
										14146,
										14151
									],
									[
										14368,
										14373
									],
									[
										14576,
										14581
									],
									[
										14800,
										14805
									],
									[
										15050,
										15055
									],
									[
										15284,
										15289
									],
									[
										15511,
										15516
									],
									[
										15676,
										15681
									],
									[
										15857,
										15862
									],
									[
										16082,
										16087
									],
									[
										16309,
										16314
									],
									[
										16509,
										16514
									],
									[
										16889,
										16894
									],
									[
										17196,
										17201
									],
									[
										17564,
										17569
									],
									[
										17614,
										17619
									],
									[
										17632,
										17637
									],
									[
										17999,
										18004
									],
									[
										18285,
										18290
									],
									[
										18688,
										18693
									],
									[
										18698,
										18703
									],
									[
										18899,
										18904
									],
									[
										18949,
										18954
									],
									[
										19212,
										19217
									],
									[
										19226,
										19231
									],
									[
										19309,
										19314
									],
									[
										19371,
										19376
									],
									[
										19631,
										19636
									],
									[
										19785,
										19790
									],
									[
										19946,
										19951
									],
									[
										20206,
										20211
									],
									[
										20498,
										20503
									],
									[
										20782,
										20787
									],
									[
										20921,
										20926
									],
									[
										21205,
										21210
									],
									[
										21515,
										21520
									],
									[
										21948,
										21953
									],
									[
										21958,
										21963
									],
									[
										22159,
										22164
									],
									[
										22209,
										22214
									],
									[
										22472,
										22477
									],
									[
										22486,
										22491
									],
									[
										22569,
										22574
									],
									[
										22631,
										22636
									],
									[
										22891,
										22896
									],
									[
										23045,
										23050
									],
									[
										23206,
										23211
									],
									[
										23466,
										23471
									],
									[
										23758,
										23763
									],
									[
										24038,
										24043
									],
									[
										24177,
										24182
									],
									[
										24483,
										24488
									],
									[
										24730,
										24735
									],
									[
										24893,
										24898
									],
									[
										24951,
										24956
									],
									[
										25019,
										25024
									],
									[
										25056,
										25061
									],
									[
										25367,
										25372
									],
									[
										25535,
										25540
									],
									[
										25695,
										25700
									],
									[
										25964,
										25969
									],
									[
										26044,
										26049
									],
									[
										26189,
										26194
									],
									[
										26287,
										26292
									],
									[
										26408,
										26413
									],
									[
										26707,
										26712
									],
									[
										26947,
										26952
									],
									[
										27176,
										27181
									],
									[
										27382,
										27387
									],
									[
										27662,
										27667
									],
									[
										27791,
										27796
									],
									[
										27924,
										27929
									],
									[
										28088,
										28093
									],
									[
										28309,
										28314
									],
									[
										28408,
										28413
									],
									[
										28449,
										28454
									],
									[
										28780,
										28785
									],
									[
										29018,
										29023
									],
									[
										29441,
										29446
									],
									[
										29451,
										29456
									],
									[
										29730,
										29735
									],
									[
										29828,
										29833
									],
									[
										29874,
										29879
									],
									[
										29952,
										29957
									],
									[
										29963,
										29968
									],
									[
										30288,
										30293
									],
									[
										30298,
										30303
									],
									[
										30611,
										30616
									],
									[
										30617,
										30622
									],
									[
										30758,
										30763
									],
									[
										30828,
										30833
									],
									[
										31146,
										31151
									],
									[
										31166,
										31171
									],
									[
										31302,
										31307
									],
									[
										31320,
										31325
									],
									[
										31514,
										31519
									],
									[
										31578,
										31583
									],
									[
										31927,
										31932
									],
									[
										32187,
										32192
									],
									[
										32389,
										32394
									],
									[
										32515,
										32520
									],
									[
										32879,
										32888
									],
									[
										33181,
										33190
									],
									[
										33405,
										33414
									],
									[
										33680,
										33689
									],
									[
										34054,
										34063
									],
									[
										34458,
										34467
									],
									[
										34791,
										34800
									],
									[
										34930,
										34939
									],
									[
										35214,
										35223
									],
									[
										35535,
										35544
									],
									[
										35674,
										35683
									],
									[
										35995,
										35998
									],
									[
										36003,
										36006
									],
									[
										36179,
										36182
									],
									[
										36478,
										36481
									],
									[
										36486,
										36489
									],
									[
										36835,
										36838
									],
									[
										37092,
										37095
									],
									[
										37254,
										37257
									],
									[
										37475,
										37478
									],
									[
										37605,
										37608
									],
									[
										37878,
										37881
									],
									[
										37989,
										37992
									],
									[
										38290,
										38293
									],
									[
										38330,
										38333
									],
									[
										38643,
										38646
									],
									[
										38875,
										38878
									],
									[
										38981,
										38984
									],
									[
										39038,
										39041
									],
									[
										39101,
										39104
									],
									[
										39334,
										39337
									],
									[
										39586,
										39589
									],
									[
										39874,
										39877
									],
									[
										40109,
										40112
									],
									[
										40411,
										40414
									],
									[
										40574,
										40577
									],
									[
										40730,
										40733
									],
									[
										41014,
										41017
									],
									[
										41274,
										41277
									],
									[
										41465,
										41468
									],
									[
										41673,
										41676
									],
									[
										41800,
										41803
									],
									[
										41925,
										41928
									],
									[
										42244,
										42247
									],
									[
										42544,
										42547
									],
									[
										42749,
										42752
									],
									[
										42953,
										42956
									],
									[
										43134,
										43137
									],
									[
										43386,
										43389
									],
									[
										43421,
										43424
									],
									[
										43812,
										43815
									],
									[
										43820,
										43823
									],
									[
										43980,
										43983
									],
									[
										44191,
										44194
									],
									[
										44314,
										44317
									],
									[
										44382,
										44385
									],
									[
										44657,
										44660
									],
									[
										45013,
										45016
									],
									[
										45315,
										45318
									],
									[
										45323,
										45326
									],
									[
										45480,
										45483
									],
									[
										45729,
										45732
									],
									[
										45942,
										45945
									],
									[
										46252,
										46255
									],
									[
										46260,
										46263
									],
									[
										46445,
										46448
									],
									[
										46790,
										46793
									],
									[
										47003,
										47006
									],
									[
										47264,
										47267
									],
									[
										47473,
										47476
									],
									[
										47705,
										47708
									],
									[
										47780,
										47783
									],
									[
										48151,
										48154
									],
									[
										48306,
										48309
									],
									[
										48552,
										48555
									],
									[
										48834,
										48837
									],
									[
										49007,
										49010
									],
									[
										49380,
										49383
									],
									[
										49406,
										49409
									],
									[
										49492,
										49495
									],
									[
										49542,
										49545
									],
									[
										49565,
										49568
									],
									[
										49817,
										49820
									],
									[
										49910,
										49913
									],
									[
										50100,
										50103
									],
									[
										50265,
										50268
									],
									[
										50392,
										50395
									],
									[
										50528,
										50531
									],
									[
										50678,
										50681
									],
									[
										50800,
										50803
									],
									[
										51006,
										51009
									],
									[
										51043,
										51046
									],
									[
										51075,
										51078
									],
									[
										51133,
										51136
									],
									[
										51172,
										51175
									],
									[
										51204,
										51207
									],
									[
										51526,
										51529
									],
									[
										51542,
										51545
									],
									[
										51680,
										51683
									],
									[
										51746,
										51749
									],
									[
										51758,
										51761
									],
									[
										51762,
										51765
									],
									[
										52065,
										52068
									],
									[
										52073,
										52076
									],
									[
										52193,
										52196
									],
									[
										52209,
										52212
									],
									[
										52433,
										52436
									],
									[
										52615,
										52618
									],
									[
										52804,
										52807
									],
									[
										52913,
										52916
									],
									[
										53159,
										53162
									],
									[
										53347,
										53350
									],
									[
										53368,
										53371
									],
									[
										53395,
										53398
									],
									[
										53407,
										53410
									],
									[
										53411,
										53414
									],
									[
										53431,
										53434
									],
									[
										53759,
										53762
									],
									[
										54221,
										54224
									],
									[
										54277,
										54280
									],
									[
										54351,
										54354
									],
									[
										54392,
										54395
									],
									[
										54439,
										54442
									],
									[
										54746,
										54749
									],
									[
										54754,
										54757
									],
									[
										55141,
										55144
									],
									[
										55149,
										55152
									],
									[
										55363,
										55366
									],
									[
										55725,
										55728
									],
									[
										55935,
										55938
									],
									[
										56121,
										56124
									],
									[
										56306,
										56309
									],
									[
										56361,
										56364
									],
									[
										56548,
										56551
									],
									[
										56709,
										56712
									],
									[
										56912,
										56915
									],
									[
										57093,
										57096
									],
									[
										57446,
										57449
									],
									[
										57513,
										57516
									],
									[
										57578,
										57581
									],
									[
										57846,
										57849
									],
									[
										57854,
										57857
									],
									[
										58028,
										58031
									],
									[
										58287,
										58290
									],
									[
										58561,
										58564
									],
									[
										58774,
										58777
									],
									[
										58847,
										58850
									],
									[
										59052,
										59055
									],
									[
										59092,
										59095
									],
									[
										59147,
										59150
									],
									[
										59397,
										59400
									],
									[
										59437,
										59440
									],
									[
										59456,
										59459
									],
									[
										59782,
										59785
									],
									[
										59992,
										59995
									],
									[
										60350,
										60353
									],
									[
										60741,
										60744
									],
									[
										61011,
										61014
									],
									[
										61287,
										61290
									],
									[
										61574,
										61577
									],
									[
										61841,
										61844
									],
									[
										61947,
										61950
									],
									[
										62004,
										62007
									],
									[
										62067,
										62070
									],
									[
										62300,
										62303
									],
									[
										62562,
										62565
									],
									[
										62850,
										62853
									],
									[
										63085,
										63088
									],
									[
										63387,
										63390
									],
									[
										63550,
										63553
									],
									[
										63706,
										63709
									],
									[
										63990,
										63993
									],
									[
										64250,
										64253
									],
									[
										64441,
										64444
									],
									[
										64649,
										64652
									],
									[
										64776,
										64779
									],
									[
										64901,
										64904
									],
									[
										65230,
										65233
									],
									[
										65540,
										65543
									],
									[
										65745,
										65748
									],
									[
										65949,
										65952
									],
									[
										66130,
										66133
									],
									[
										66392,
										66395
									],
									[
										66427,
										66430
									],
									[
										66828,
										66831
									],
									[
										66836,
										66839
									],
									[
										66996,
										66999
									],
									[
										67207,
										67210
									],
									[
										67330,
										67333
									],
									[
										67398,
										67401
									],
									[
										67673,
										67676
									],
									[
										68039,
										68042
									],
									[
										68351,
										68354
									],
									[
										68359,
										68362
									],
									[
										68516,
										68519
									],
									[
										68765,
										68768
									],
									[
										68978,
										68981
									],
									[
										69298,
										69301
									],
									[
										69306,
										69309
									],
									[
										69491,
										69494
									],
									[
										69836,
										69839
									],
									[
										70049,
										70052
									],
									[
										70310,
										70313
									],
									[
										70519,
										70522
									],
									[
										70751,
										70754
									],
									[
										70826,
										70829
									],
									[
										71197,
										71200
									],
									[
										71352,
										71355
									],
									[
										71598,
										71601
									],
									[
										71880,
										71883
									],
									[
										72053,
										72056
									],
									[
										72436,
										72439
									],
									[
										72462,
										72465
									],
									[
										72548,
										72551
									],
									[
										72598,
										72601
									],
									[
										72621,
										72624
									],
									[
										72883,
										72886
									],
									[
										72976,
										72979
									],
									[
										73166,
										73169
									],
									[
										73331,
										73334
									],
									[
										73458,
										73461
									],
									[
										73594,
										73597
									],
									[
										73744,
										73747
									],
									[
										73866,
										73869
									],
									[
										74082,
										74085
									],
									[
										74119,
										74122
									],
									[
										74151,
										74154
									],
									[
										74209,
										74212
									],
									[
										74248,
										74251
									],
									[
										74280,
										74283
									],
									[
										74612,
										74615
									],
									[
										74628,
										74631
									],
									[
										74766,
										74769
									],
									[
										74832,
										74835
									],
									[
										74844,
										74847
									],
									[
										74848,
										74851
									],
									[
										75161,
										75164
									],
									[
										75169,
										75172
									],
									[
										75289,
										75292
									],
									[
										75305,
										75308
									],
									[
										75529,
										75532
									],
									[
										75711,
										75714
									],
									[
										75900,
										75903
									],
									[
										76009,
										76012
									],
									[
										76255,
										76258
									],
									[
										76443,
										76446
									],
									[
										76464,
										76467
									],
									[
										76491,
										76494
									],
									[
										76503,
										76506
									],
									[
										76507,
										76510
									],
									[
										76527,
										76530
									],
									[
										76855,
										76858
									],
									[
										77327,
										77330
									],
									[
										77383,
										77386
									],
									[
										77457,
										77460
									],
									[
										77498,
										77501
									],
									[
										77545,
										77548
									],
									[
										77873,
										77876
									],
									[
										77881,
										77884
									],
									[
										78057,
										78060
									],
									[
										78419,
										78422
									],
									[
										78427,
										78430
									],
									[
										78673,
										78676
									],
									[
										78860,
										78863
									],
									[
										79000,
										79003
									],
									[
										79221,
										79224
									],
									[
										79494,
										79497
									],
									[
										79792,
										79795
									],
									[
										79800,
										79803
									],
									[
										80067,
										80070
									],
									[
										80272,
										80275
									],
									[
										80476,
										80479
									],
									[
										80657,
										80660
									],
									[
										80874,
										80877
									],
									[
										80909,
										80912
									],
									[
										81265,
										81268
									],
									[
										81273,
										81276
									],
									[
										81433,
										81436
									],
									[
										81644,
										81647
									],
									[
										81767,
										81770
									],
									[
										81835,
										81838
									],
									[
										82110,
										82113
									],
									[
										82431,
										82434
									],
									[
										82698,
										82701
									],
									[
										82706,
										82709
									],
									[
										82863,
										82866
									],
									[
										83112,
										83115
									],
									[
										83325,
										83328
									],
									[
										83600,
										83603
									],
									[
										83608,
										83611
									],
									[
										83793,
										83796
									],
									[
										84138,
										84141
									],
									[
										84351,
										84354
									],
									[
										84612,
										84615
									],
									[
										84821,
										84824
									],
									[
										85053,
										85056
									],
									[
										85128,
										85131
									],
									[
										85499,
										85502
									],
									[
										85654,
										85657
									],
									[
										85900,
										85903
									],
									[
										86182,
										86185
									],
									[
										86355,
										86358
									],
									[
										86693,
										86696
									],
									[
										86719,
										86722
									],
									[
										86805,
										86808
									],
									[
										86855,
										86858
									],
									[
										86878,
										86881
									],
									[
										87094,
										87097
									],
									[
										87201,
										87204
									],
									[
										87517,
										87520
									],
									[
										87534,
										87537
									],
									[
										87817,
										87820
									],
									[
										87881,
										87884
									],
									[
										87978,
										87981
									],
									[
										88200,
										88203
									],
									[
										88213,
										88216
									],
									[
										88267,
										88270
									],
									[
										88280,
										88283
									],
									[
										88343,
										88346
									],
									[
										88424,
										88427
									],
									[
										88499,
										88502
									],
									[
										88573,
										88576
									],
									[
										88648,
										88651
									],
									[
										88865,
										88868
									],
									[
										88958,
										88961
									],
									[
										89148,
										89151
									],
									[
										89313,
										89316
									],
									[
										89440,
										89443
									],
									[
										89576,
										89579
									],
									[
										89726,
										89729
									],
									[
										89848,
										89851
									],
									[
										89983,
										89986
									],
									[
										90199,
										90202
									],
									[
										90236,
										90239
									],
									[
										90268,
										90271
									],
									[
										90326,
										90329
									],
									[
										90365,
										90368
									],
									[
										90397,
										90400
									],
									[
										90629,
										90632
									],
									[
										90637,
										90640
									],
									[
										90907,
										90910
									],
									[
										91113,
										91116
									],
									[
										91142,
										91145
									],
									[
										91497,
										91500
									],
									[
										91505,
										91508
									],
									[
										91938,
										91941
									],
									[
										92278,
										92281
									],
									[
										92389,
										92392
									],
									[
										92690,
										92693
									],
									[
										92730,
										92733
									],
									[
										93042,
										93045
									],
									[
										93370,
										93373
									],
									[
										93378,
										93381
									],
									[
										93782,
										93785
									],
									[
										94053,
										94056
									],
									[
										94354,
										94357
									],
									[
										94661,
										94664
									],
									[
										94669,
										94672
									],
									[
										94845,
										94848
									],
									[
										95240,
										95243
									],
									[
										95248,
										95251
									],
									[
										95482,
										95485
									],
									[
										95736,
										95739
									],
									[
										95976,
										95979
									],
									[
										96240,
										96243
									],
									[
										96555,
										96558
									],
									[
										96632,
										96635
									],
									[
										96977,
										96980
									],
									[
										97243,
										97246
									],
									[
										97354,
										97357
									],
									[
										97568,
										97571
									],
									[
										97926,
										97929
									],
									[
										97934,
										97937
									],
									[
										98132,
										98135
									],
									[
										98410,
										98413
									],
									[
										98704,
										98707
									],
									[
										98738,
										98741
									],
									[
										98957,
										98960
									],
									[
										99153,
										99156
									],
									[
										99465,
										99468
									],
									[
										99473,
										99476
									],
									[
										99801,
										99804
									],
									[
										99809,
										99812
									],
									[
										100107,
										100110
									],
									[
										100510,
										100513
									],
									[
										100526,
										100529
									],
									[
										100664,
										100667
									],
									[
										100730,
										100733
									],
									[
										100742,
										100745
									],
									[
										100746,
										100749
									],
									[
										101020,
										101023
									],
									[
										101028,
										101031
									],
									[
										101148,
										101151
									],
									[
										101164,
										101167
									],
									[
										101388,
										101391
									],
									[
										101570,
										101573
									],
									[
										101759,
										101762
									],
									[
										101868,
										101871
									],
									[
										102114,
										102117
									],
									[
										102302,
										102305
									],
									[
										102323,
										102326
									],
									[
										102350,
										102353
									],
									[
										102362,
										102365
									],
									[
										102366,
										102369
									],
									[
										102386,
										102389
									],
									[
										102714,
										102717
									],
									[
										103147,
										103150
									],
									[
										103203,
										103206
									],
									[
										103277,
										103280
									],
									[
										103318,
										103321
									],
									[
										103365,
										103368
									],
									[
										103734,
										103737
									],
									[
										103778,
										103781
									],
									[
										104265,
										104268
									],
									[
										104596,
										104599
									],
									[
										104790,
										104793
									],
									[
										104841,
										104844
									],
									[
										105164,
										105167
									],
									[
										105172,
										105175
									],
									[
										105252,
										105255
									],
									[
										105456,
										105459
									],
									[
										105726,
										105729
									],
									[
										105775,
										105778
									],
									[
										105812,
										105815
									],
									[
										106002,
										106005
									],
									[
										106044,
										106047
									],
									[
										106120,
										106123
									],
									[
										106159,
										106162
									],
									[
										106322,
										106325
									],
									[
										106361,
										106364
									],
									[
										106517,
										106520
									],
									[
										106553,
										106556
									],
									[
										106701,
										106704
									],
									[
										106733,
										106736
									],
									[
										106948,
										106951
									],
									[
										106981,
										106984
									],
									[
										107199,
										107202
									],
									[
										107348,
										107351
									],
									[
										107491,
										107494
									],
									[
										107625,
										107628
									],
									[
										107851,
										107854
									],
									[
										108076,
										108079
									],
									[
										108181,
										108184
									],
									[
										108337,
										108340
									],
									[
										108487,
										108490
									],
									[
										108628,
										108631
									],
									[
										108844,
										108847
									],
									[
										109130,
										109133
									],
									[
										109311,
										109314
									],
									[
										109369,
										109372
									],
									[
										109492,
										109495
									],
									[
										109667,
										109670
									],
									[
										109807,
										109810
									],
									[
										109878,
										109881
									],
									[
										110004,
										110007
									],
									[
										110144,
										110147
									],
									[
										110279,
										110282
									],
									[
										110298,
										110301
									],
									[
										110490,
										110493
									],
									[
										110639,
										110642
									],
									[
										110679,
										110682
									],
									[
										110975,
										110978
									],
									[
										110983,
										110986
									],
									[
										111117,
										111120
									],
									[
										111158,
										111161
									],
									[
										111433,
										111436
									],
									[
										111650,
										111653
									],
									[
										111669,
										111672
									],
									[
										111901,
										111904
									],
									[
										111939,
										111942
									],
									[
										112264,
										112267
									],
									[
										112381,
										112384
									],
									[
										112697,
										112700
									],
									[
										112714,
										112717
									],
									[
										112997,
										113000
									],
									[
										113061,
										113064
									],
									[
										113158,
										113161
									],
									[
										113379,
										113382
									],
									[
										113392,
										113395
									],
									[
										113673,
										113676
									],
									[
										113686,
										113689
									],
									[
										113754,
										113757
									],
									[
										113830,
										113833
									],
									[
										113905,
										113908
									],
									[
										113979,
										113982
									],
									[
										114054,
										114057
									],
									[
										114210,
										114213
									],
									[
										114387,
										114390
									],
									[
										114484,
										114487
									],
									[
										114492,
										114495
									],
									[
										114814,
										114817
									],
									[
										114822,
										114825
									],
									[
										115027,
										115030
									],
									[
										115342,
										115345
									],
									[
										115745,
										115748
									],
									[
										115753,
										115756
									],
									[
										116092,
										116095
									],
									[
										116100,
										116103
									],
									[
										116345,
										116348
									],
									[
										116589,
										116592
									],
									[
										116935,
										116938
									],
									[
										116943,
										116946
									],
									[
										117197,
										117200
									],
									[
										117417,
										117420
									],
									[
										117688,
										117691
									],
									[
										117919,
										117922
									],
									[
										118280,
										118283
									],
									[
										118340,
										118343
									],
									[
										118526,
										118529
									],
									[
										118759,
										118762
									],
									[
										119040,
										119043
									],
									[
										119257,
										119260
									],
									[
										119673,
										119676
									],
									[
										119681,
										119684
									],
									[
										119917,
										119920
									],
									[
										120153,
										120156
									],
									[
										120495,
										120498
									],
									[
										120615,
										120618
									],
									[
										120951,
										120954
									],
									[
										121071,
										121074
									],
									[
										121331,
										121334
									],
									[
										121559,
										121562
									],
									[
										121826,
										121829
									],
									[
										121969,
										121972
									],
									[
										122331,
										122334
									],
									[
										122339,
										122342
									],
									[
										122538,
										122541
									],
									[
										122772,
										122775
									],
									[
										122885,
										122888
									],
									[
										123129,
										123132
									],
									[
										123383,
										123386
									],
									[
										123498,
										123501
									],
									[
										123741,
										123744
									],
									[
										124001,
										124004
									],
									[
										124189,
										124192
									],
									[
										124439,
										124442
									],
									[
										124616,
										124619
									],
									[
										124825,
										124828
									],
									[
										125049,
										125052
									],
									[
										125287,
										125290
									],
									[
										125551,
										125554
									],
									[
										125859,
										125862
									],
									[
										126050,
										126053
									],
									[
										126113,
										126116
									],
									[
										126247,
										126250
									],
									[
										126304,
										126307
									],
									[
										126465,
										126468
									],
									[
										126536,
										126539
									],
									[
										126726,
										126729
									],
									[
										126798,
										126801
									],
									[
										127049,
										127052
									],
									[
										127085,
										127088
									],
									[
										127289,
										127292
									],
									[
										127333,
										127336
									],
									[
										127518,
										127521
									],
									[
										127532,
										127535
									],
									[
										127832,
										127835
									],
									[
										127846,
										127849
									],
									[
										128135,
										128138
									],
									[
										128149,
										128152
									],
									[
										128345,
										128348
									],
									[
										128393,
										128396
									],
									[
										128470,
										128473
									],
									[
										128607,
										128610
									],
									[
										128647,
										128650
									],
									[
										128679,
										128682
									],
									[
										128995,
										128998
									],
									[
										129003,
										129006
									],
									[
										129239,
										129242
									],
									[
										129594,
										129597
									],
									[
										129745,
										129748
									],
									[
										129988,
										129991
									],
									[
										130343,
										130346
									],
									[
										130494,
										130497
									],
									[
										130912,
										130915
									],
									[
										130934,
										130937
									],
									[
										131241,
										131244
									],
									[
										131249,
										131252
									],
									[
										131425,
										131428
									],
									[
										131769,
										131772
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								44200,
								44191
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"detect_indentation": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 17298.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/ndrw/pedestal-samples/chat/chat-client/app/src/chat_client/web/simulated/start.cljs",
					"settings":
					{
						"buffer_size": 1838,
						"regions":
						{
						},
						"selection":
						[
							[
								786,
								786
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 31.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "booking-app/app/src/booking_app/simulated/start.cljs",
					"settings":
					{
						"buffer_size": 1166,
						"regions":
						{
						},
						"selection":
						[
							[
								931,
								931
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "booking-app/app/templates/application.html",
					"settings":
					{
						"buffer_size": 1242,
						"regions":
						{
						},
						"selection":
						[
							[
								868,
								868
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "booking-app/app/templates/booking-app.html",
					"settings":
					{
						"buffer_size": 1159,
						"regions":
						{
						},
						"selection":
						[
							[
								230,
								230
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "booking-app/config/config.clj",
					"settings":
					{
						"buffer_size": 5068,
						"regions":
						{
						},
						"selection":
						[
							[
								1485,
								1485
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 409.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "booking-app/test/booking_app/test/behavior.clj",
					"settings":
					{
						"buffer_size": 1397,
						"regions":
						{
						},
						"selection":
						[
							[
								400,
								400
							]
						],
						"settings":
						{
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/Clojure/Clojure.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 27.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"http.",
				"pedestal/service/src/io/pedestal/service/http.clj"
			],
			[
				"service.cl",
				"pedestal/app-tools/src/io/pedestal/app_tools/service.clj"
			],
			[
				"pro",
				"project.clj"
			],
			[
				"ui",
				"src-cljs/monte/ui.cljs"
			],
			[
				"proje",
				"project.clj"
			],
			[
				"comm",
				"src/monte/views/common.clj"
			],
			[
				"index",
				"src/monte/views/index.clj"
			],
			[
				"tod",
				"monte.TODO"
			],
			[
				"mo",
				"monte.TODO"
			],
			[
				"_test",
				"test/monte/core_test.clj"
			],
			[
				"miner",
				"test/monte/miners_test.clj"
			],
			[
				"core",
				"test/monte/core_test.clj"
			],
			[
				"projec",
				"src/monte/views/project.clj"
			],
			[
				"monte",
				"prototypes/js/monte.js"
			],
			[
				"dumm",
				"src/monte/dummies.clj"
			],
			[
				"core_",
				"test/monte/core_test.clj"
			],
			[
				"css",
				"resources/public/css/monte.css"
			],
			[
				"proj",
				"src/monte/views/project.clj"
			],
			[
				"miners",
				"src/monte/miners/core.clj"
			],
			[
				"min",
				"test/monte/miners_test.clj"
			],
			[
				"ap",
				"src/monte/backend/api.clj"
			],
			[
				"a",
				"src/monte/backend/api.clj"
			],
			[
				"proe",
				"src/monte/views/project.clj"
			],
			[
				"co",
				"src/monte/miners/core.clj"
			],
			[
				"to",
				"monte.TODO"
			],
			[
				"in",
				"src/monte/views/index.clj"
			],
			[
				"serv",
				"src/monte/backend/server.clj"
			],
			[
				"la",
				"src/monte/launcher.clj"
			],
			[
				"run",
				"src/monte/runtime.clj"
			],
			[
				"inde",
				"src/monte/views/index.clj"
			],
			[
				"todo",
				"monte.TODO"
			],
			[
				"jir",
				"test/monte/JIRAMiner_test.clj"
			],
			[
				"dra",
				"prototypes/js/dracula_graph.js"
			],
			[
				"mon",
				"resources/public/css/monte.css"
			],
			[
				"core_te",
				"test/monte/core_test.clj"
			],
			[
				"pr",
				"project.clj"
			],
			[
				"vis",
				"Monte/prototypes/visualize.html"
			],
			[
				"p",
				"Monte/project.clj"
			],
			[
				"project",
				"Monte/src/monte/views/project.clj"
			],
			[
				"js",
				"Monte/resources/public/js/js.js"
			],
			[
				"lau",
				"Monte/src/monte/launcher.clj"
			],
			[
				"api",
				"Monte/src/monte/backend/api.clj"
			],
			[
				"visa",
				"Monte/prototypes/visualize.html"
			],
			[
				"project.",
				"Monte/src/monte/views/project.clj"
			],
			[
				"monte.js",
				"Monte/prototypes/js/monte.js"
			],
			[
				"visua",
				"Monte/prototypes/visualize.html"
			],
			[
				"re",
				"Monte/README.md"
			],
			[
				"ser",
				"Monte/src/monte/backend/server.clj"
			],
			[
				"server",
				"Monte/src/monte/backend/server.clj"
			],
			[
				"macr",
				"Monte/test/monte/macro_test.clj"
			],
			[
				"m",
				"Monte/monte.TODO"
			],
			[
				"runt",
				"Monte/src/monte/runtime.clj"
			],
			[
				"view",
				"Monte/src/monte/views/index.clj"
			],
			[
				"serve",
				"Monte/src/monte/backend/server.clj"
			],
			[
				"ex",
				"Monte/test/monte/extern-miners.clj"
			],
			[
				"miner_te",
				"Monte/test/monte/miners_test.clj"
			],
			[
				"impl",
				"Monte/src/monte/miners/impl.clj"
			],
			[
				"data",
				"prototypes/data.html"
			],
			[
				"test",
				"src-cljs/monte/test.cljs"
			],
			[
				"",
				"project.clj"
			],
			[
				"tm",
				"tex/tmp.txt"
			],
			[
				"an",
				"tex/src/annotation.tex"
			],
			[
				"ti",
				"tex/src/title_page.tex"
			],
			[
				"subl",
				"tex/dyplom.sublime-project"
			],
			[
				"tit",
				"tex/src/title_page.tex"
			],
			[
				"ann",
				"tex/src/annotation.tex"
			],
			[
				"abs",
				"w495-dsmts-diploma-text-2249dd8/src/abstract.tex"
			],
			[
				"diploma.tex",
				"w495-dsmts-diploma-text-2249dd8/diploma.tex"
			],
			[
				"de",
				"tex/styles/default.sty"
			],
			[
				"title_page.tex",
				"tex/src/title_page.tex"
			],
			[
				"title",
				"tex/src/title_page.aux"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 215.0,
	"status_bar_visible": true
}
